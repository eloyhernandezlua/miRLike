
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACOR ALLA AND APAR BOOL CCOR CHAR CLLA COMA CPAR CTEC CTEF CTEI DIF DIV DO DOSPNTS ELSE FALSE FLOAT FOR FUNCTION ID IF IGUAL IGUALIGUAL INT MAIN MAS MAYI MAYQ MENI MENOS MENQ NOT OR POR PROGRAM PTCOMA READ RETURN STR STRING THEN TO TRUE VARS VOID WHILE WRITEprogram : PROGRAM agregarTablaFunciones varss funcs MAIN APAR CPAR ALLA poptomain estatutos CLLAagregarTablaFunciones : ID PTCOMApoptomain : varss : VARS vars\n             | empty\n    vars : tipo DOSPNTS insertVar varsppp varspp vars\n            | empty\n    insertVar : IDvarsppp : ACOR CTEI CCOR\n               | empty\n    varspp : PTCOMA\n              | COMA insertVar varsppp varspp\n    funcs : FUNCTION funcsp insertFunc funcspp\n             | empty\n    insertFunc : IDfuncspp : APAR params CPAR PTCOMA varss ALLA addsize estatutos CLLA endfunction funcsendfunction : addsize : funcsp : VOID\n              | tipo\n    estatutos : asig estatutop\n                 | return estatutop\n                 | lectura estatutop\n                 | escritura estatutop\n                 | cond estatutop\n                 | while estatutop\n                 | for estatutop\n                 | exp estatutop\n    estatutop : estatutos\n                 | empty\n    tipo : INT\n            | FLOAT\n            | CHAR\n    params : tipo DOSPNTS insertParams ididx paramsp\n              | empty\n    insertParams : ID\n    paramsp : COMA params\n               | empty\n    asig : varAs ididx igualAs asigpp PTCOMAvarAs : IDigualAs : IGUALasigp : exp asigppp\n             | empty\n    asigppp : COMA asigp\n               | empty\n    asigpp : exp\n              | ACOR asigp CCOR\n    ididx : ACOR exp CCOR\n             | empty\n    return : RETURN APAR exp CPAR PTCOMAlectura : READ APAR readId ididx lecturapp CPAR PTCOMAreadId : ID\n    lecturapp : COMA readId ididx lecturapp\n                 | empty\n    escritura : WRITE APAR escriturap escriturapp CPAR PTCOMAescriturap : pushEsc\n                  | exp\n    pushEsc : STRING\n               | CTEC\n    escriturapp : COMA escriturap\n                   | empty\n    cond : IF APAR exp checkCond THEN ALLA estatutos CLLA condppcondpp : checkElse ALLA estatutos CLLA\n              | empty\n    checkElse : ELSE\n    checkCond : CPAR\n    while : saveWhile APAR exp checkWhileCond DO ALLA estatutos CLLAsaveWhile : WHILE\n    checkWhileCond : CPAR\n    for : FOR varFor ididx IGUAL exp initFor exp beforeDo ALLA estatutos CLLAvarFor : ID\n    initFor : TO\n    beforeDo : DO\n    exp : texp exppexpp : OR exp\n            | empty\n    texp : gexp texpptexpp : andCheck texp\n             | empty\n     andCheck : AND\n    gexp : mexp gexppgexpp : addPO mexp\n             | empty\n    addPO : MAYQ\n             | MENQ\n             | MAYI\n             | MENI\n             | IGUAL IGUAL\n             | DIF\n    mexp : termino mexppmexpp : operSR mexp\n            | empty\n    operSR : MENOS\n              | MAS\n    termino : factor terminopterminop : oper termino\n                | empty\n    oper : DIV\n            | POR\n    factor : APAR exp CPAR\n              | ctes\n    factorp : APAR exp factorpp CPAR\n               | ACOR exp CCOR\n               | empty\n    factorpp : COMA exp factorpp\n                | empty\n    ctes : CTEC\n            | CTEI\n            | CTEF\n            | ID factorp\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,82,],[0,-1,]),'ID':([2,15,16,17,19,20,21,22,34,40,42,44,48,50,51,52,53,54,55,56,57,64,65,66,68,69,70,71,72,73,74,75,81,94,96,97,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,136,137,138,151,154,155,156,157,158,159,165,170,176,178,180,181,183,187,189,196,201,205,206,207,208,209,213,220,221,225,227,229,230,233,234,],[4,-31,-32,-33,25,-19,-20,27,-3,27,66,78,81,66,66,66,66,66,66,66,66,102,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,81,81,142,81,81,81,-74,81,-76,-110,81,81,-104,-77,81,-79,-80,-81,81,-83,-84,-85,-86,-87,-89,-90,81,-92,-93,-94,-95,81,-97,-98,-99,-100,81,-41,-75,-78,-82,-88,-91,-96,-18,81,81,81,81,-103,66,-39,-50,142,-102,81,-55,66,66,81,-72,-51,-111,-67,-62,-64,66,66,-70,-63,]),'VARS':([3,8,76,],[6,-2,6,]),'FUNCTION':([3,5,6,7,8,12,14,38,39,45,135,211,218,],[-111,10,-111,-5,-2,-4,-7,-111,-11,-6,-12,-17,10,]),'MAIN':([3,5,6,7,8,9,11,12,14,29,38,39,45,135,211,218,224,],[-111,-111,-111,-5,-2,18,-14,-4,-7,-13,-111,-11,-6,-12,-17,-111,-16,]),'PTCOMA':([4,26,27,31,33,43,46,47,65,68,69,70,71,72,73,74,75,79,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,163,164,167,180,191,196,199,203,],[8,-111,-8,39,-10,76,-111,-9,-111,-111,-111,-111,-111,-101,-107,-108,-109,39,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,183,-46,187,-103,205,-102,-47,213,]),'INT':([6,10,30,38,39,135,161,],[15,15,15,15,-11,-12,15,]),'FLOAT':([6,10,30,38,39,135,161,],[16,16,16,16,-11,-12,16,]),'CHAR':([6,10,30,38,39,135,161,],[17,17,17,17,-11,-12,17,]),'ALLA':([6,7,12,14,28,38,39,45,76,133,135,193,194,222,223,226,228,],[-111,-5,-4,-7,34,-111,-11,-6,-111,159,-12,206,207,229,-73,230,-65,]),'VOID':([10,],[20,]),'DOSPNTS':([13,15,16,17,36,],[22,-31,-32,-33,44,]),'APAR':([18,24,25,34,42,48,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,81,94,96,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,136,137,138,151,154,155,156,157,158,159,165,170,176,178,180,181,183,187,196,201,205,206,207,208,209,213,220,221,225,227,229,230,233,234,],[23,30,-15,-3,48,48,48,48,48,48,48,48,48,48,96,97,98,99,100,-111,107,-68,-111,-111,-111,-111,-101,-107,-108,-109,107,48,48,48,48,48,-74,48,-76,-110,48,48,-104,-77,48,-79,-80,-81,48,-83,-84,-85,-86,-87,-89,-90,48,-92,-93,-94,-95,48,-97,-98,-99,-100,48,-41,-75,-78,-82,-88,-91,-96,-18,48,48,48,48,-103,48,-39,-50,-102,48,-55,48,48,48,-72,-51,-111,-67,-62,-64,48,48,-70,-63,]),'CPAR':([23,30,35,37,65,68,69,70,71,72,73,74,75,77,78,80,81,95,103,105,106,109,110,112,114,116,123,125,128,130,134,136,140,141,142,143,144,145,146,147,148,149,151,152,154,155,157,158,160,161,162,166,168,169,171,177,179,180,182,188,190,192,196,197,204,210,214,219,],[28,-111,43,-35,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-36,136,-111,-49,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-111,-100,167,-111,-52,-111,-56,-57,-58,-59,173,175,-75,-111,-78,-82,-91,-96,-34,-111,-38,-48,-111,191,-61,196,-106,-103,-37,203,-54,-60,-102,-111,-111,-105,-111,-53,]),'ACOR':([26,27,46,58,66,77,78,81,101,102,137,138,141,142,204,],[32,-8,32,94,108,94,-36,108,94,-71,165,-41,94,-52,94,]),'COMA':([26,27,31,33,46,47,65,68,69,70,71,72,73,74,75,77,78,79,81,95,103,105,106,109,110,112,114,116,123,125,128,130,134,136,141,142,143,144,145,146,147,151,152,154,155,157,158,166,168,180,185,196,197,204,214,],[-111,-8,40,-10,-111,-9,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-36,40,-111,-49,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,161,-100,-111,-52,170,-56,-57,-58,-59,-75,178,-78,-82,-91,-96,-48,189,-103,201,-102,178,-111,189,]),'CTEI':([32,34,42,48,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,94,96,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,136,137,138,151,154,155,156,157,158,159,165,170,176,178,180,181,183,187,196,201,205,206,207,208,209,213,220,221,225,227,229,230,233,234,],[41,-3,74,74,74,74,74,74,74,74,74,74,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,74,74,74,74,74,-74,74,-76,-110,74,74,-104,-77,74,-79,-80,-81,74,-83,-84,-85,-86,-87,-89,-90,74,-92,-93,-94,-95,74,-97,-98,-99,-100,74,-41,-75,-78,-82,-88,-91,-96,-18,74,74,74,74,-103,74,-39,-50,-102,74,-55,74,74,74,-72,-51,-111,-67,-62,-64,74,74,-70,-63,]),'RETURN':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,59,59,59,59,59,59,59,59,59,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,59,-39,-50,-102,-55,59,59,-51,-111,-67,-62,-64,59,59,-70,-63,]),'READ':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,60,60,60,60,60,60,60,60,60,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,60,-39,-50,-102,-55,60,60,-51,-111,-67,-62,-64,60,60,-70,-63,]),'WRITE':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,61,61,61,61,61,61,61,61,61,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,61,-39,-50,-102,-55,61,61,-51,-111,-67,-62,-64,61,61,-70,-63,]),'IF':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,62,62,62,62,62,62,62,62,62,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,62,-39,-50,-102,-55,62,62,-51,-111,-67,-62,-64,62,62,-70,-63,]),'FOR':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,64,64,64,64,64,64,64,64,64,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,64,-39,-50,-102,-55,64,64,-51,-111,-67,-62,-64,64,64,-70,-63,]),'WHILE':([34,42,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,159,180,181,183,187,196,205,206,207,213,220,221,225,227,229,230,233,234,],[-3,67,67,67,67,67,67,67,67,67,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-18,-103,67,-39,-50,-102,-55,67,67,-51,-111,-67,-62,-64,67,67,-70,-63,]),'CTEC':([34,42,48,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,94,96,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,136,137,138,151,154,155,156,157,158,159,165,170,176,178,180,181,183,187,196,201,205,206,207,208,209,213,220,221,225,227,229,230,233,234,],[-3,73,73,73,73,73,73,73,73,73,73,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,73,73,147,73,73,-74,73,-76,-110,73,73,-104,-77,73,-79,-80,-81,73,-83,-84,-85,-86,-87,-89,-90,73,-92,-93,-94,-95,73,-97,-98,-99,-100,73,-41,-75,-78,-82,-88,-91,-96,-18,73,147,73,73,-103,73,-39,-50,-102,73,-55,73,73,73,-72,-51,-111,-67,-62,-64,73,73,-70,-63,]),'CTEF':([34,42,48,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,94,96,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,136,137,138,151,154,155,156,157,158,159,165,170,176,178,180,181,183,187,196,201,205,206,207,208,209,213,220,221,225,227,229,230,233,234,],[-3,75,75,75,75,75,75,75,75,75,75,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,75,75,75,75,75,-74,75,-76,-110,75,75,-104,-77,75,-79,-80,-81,75,-83,-84,-85,-86,-87,-89,-90,75,-92,-93,-94,-95,75,-97,-98,-99,-100,75,-41,-75,-78,-82,-88,-91,-96,-18,75,75,75,75,-103,75,-39,-50,-102,75,-55,75,75,75,-72,-51,-111,-67,-62,-64,75,75,-70,-63,]),'CCOR':([41,65,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,139,151,153,154,155,157,158,165,180,184,185,186,196,200,201,202,212,],[47,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,166,-75,180,-78,-82,-91,-96,-111,-103,199,-111,-43,-102,-42,-111,-45,-44,]),'CLLA':([49,50,51,52,53,54,55,56,57,65,66,68,69,70,71,72,73,74,75,81,83,84,85,86,87,88,89,90,91,92,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,180,183,187,196,198,205,213,215,216,220,221,225,227,231,232,233,234,],[82,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-21,-29,-30,-22,-23,-24,-25,-26,-27,-28,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-103,-39,-50,-102,211,-55,-51,220,221,-111,-67,-62,-64,233,234,-70,-63,]),'IGUAL':([58,66,69,70,71,72,73,74,75,81,93,95,101,102,106,109,121,123,125,128,130,136,147,150,157,158,166,180,196,],[-111,-40,121,-111,-111,-101,-107,-108,-109,-111,138,-49,-111,-71,-110,-104,156,-90,-92,-95,-97,-100,-107,176,-91,-96,-48,-103,-102,]),'OR':([65,66,68,69,70,71,72,73,74,75,81,106,109,110,112,114,116,123,125,128,130,136,147,154,155,157,158,180,196,],[104,-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-107,-78,-82,-91,-96,-103,-102,]),'TO':([65,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,180,195,196,],[-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,-103,209,-102,]),'DO':([65,68,69,70,71,72,73,74,75,81,103,105,106,109,110,112,114,116,123,125,128,130,136,151,154,155,157,158,174,175,180,196,217,],[-111,-111,-111,-111,-111,-101,-107,-108,-109,-111,-74,-76,-110,-104,-77,-79,-81,-83,-90,-92,-95,-97,-100,-75,-78,-82,-91,-96,194,-69,-103,-102,223,]),'DIV':([66,71,72,73,74,75,81,106,109,136,147,180,196,],[-111,131,-101,-107,-108,-109,-111,-110,-104,-100,-107,-103,-102,]),'POR':([66,71,72,73,74,75,81,106,109,136,147,180,196,],[-111,132,-101,-107,-108,-109,-111,-110,-104,-100,-107,-103,-102,]),'MENOS':([66,70,71,72,73,74,75,81,106,109,128,130,136,147,158,180,196,],[-111,126,-111,-101,-107,-108,-109,-111,-110,-104,-95,-97,-100,-107,-96,-103,-102,]),'MAS':([66,70,71,72,73,74,75,81,106,109,128,130,136,147,158,180,196,],[-111,127,-111,-101,-107,-108,-109,-111,-110,-104,-95,-97,-100,-107,-96,-103,-102,]),'MAYQ':([66,69,70,71,72,73,74,75,81,106,109,123,125,128,130,136,147,157,158,180,196,],[-111,117,-111,-111,-101,-107,-108,-109,-111,-110,-104,-90,-92,-95,-97,-100,-107,-91,-96,-103,-102,]),'MENQ':([66,69,70,71,72,73,74,75,81,106,109,123,125,128,130,136,147,157,158,180,196,],[-111,118,-111,-111,-101,-107,-108,-109,-111,-110,-104,-90,-92,-95,-97,-100,-107,-91,-96,-103,-102,]),'MAYI':([66,69,70,71,72,73,74,75,81,106,109,123,125,128,130,136,147,157,158,180,196,],[-111,119,-111,-111,-101,-107,-108,-109,-111,-110,-104,-90,-92,-95,-97,-100,-107,-91,-96,-103,-102,]),'MENI':([66,69,70,71,72,73,74,75,81,106,109,123,125,128,130,136,147,157,158,180,196,],[-111,120,-111,-111,-101,-107,-108,-109,-111,-110,-104,-90,-92,-95,-97,-100,-107,-91,-96,-103,-102,]),'DIF':([66,69,70,71,72,73,74,75,81,106,109,123,125,128,130,136,147,157,158,180,196,],[-111,122,-111,-111,-101,-107,-108,-109,-111,-110,-104,-90,-92,-95,-97,-100,-107,-91,-96,-103,-102,]),'AND':([66,68,69,70,71,72,73,74,75,81,106,109,114,116,123,125,128,130,136,147,155,157,158,180,196,],[-111,113,-111,-111,-111,-101,-107,-108,-109,-111,-110,-104,-81,-83,-90,-92,-95,-97,-100,-107,-82,-91,-96,-103,-102,]),'STRING':([98,170,],[146,146,]),'THEN':([172,173,],[193,-66,]),'ELSE':([220,],[228,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'agregarTablaFunciones':([2,],[3,]),'varss':([3,76,],[5,133,]),'empty':([3,5,6,26,30,38,46,50,51,52,53,54,55,56,57,58,65,66,68,69,70,71,76,77,81,101,134,141,143,152,161,165,168,185,197,201,204,214,218,220,],[7,11,14,33,37,14,33,85,85,85,85,85,85,85,85,95,105,109,112,116,125,130,7,95,109,95,162,95,171,179,37,186,190,202,179,186,95,190,11,227,]),'funcs':([5,218,],[9,224,]),'vars':([6,38,],[12,45,]),'tipo':([6,10,30,38,161,],[13,21,36,13,36,]),'funcsp':([10,],[19,]),'insertFunc':([19,],[24,]),'insertVar':([22,40,],[26,46,]),'funcspp':([24,],[29,]),'varsppp':([26,46,],[31,79,]),'params':([30,161,],[35,182,]),'varspp':([31,79,],[38,135,]),'poptomain':([34,],[42,]),'estatutos':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[49,84,84,84,84,84,84,84,84,198,215,216,231,232,]),'asig':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'return':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'lectura':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'escritura':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'cond':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'while':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'for':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'exp':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,137,165,170,176,178,181,201,206,207,208,229,230,],[57,80,57,57,57,57,57,57,57,57,139,140,145,148,149,151,152,153,164,185,145,195,197,57,185,57,57,217,57,57,]),'varAs':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'saveWhile':([42,50,51,52,53,54,55,56,57,181,206,207,229,230,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'texp':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,137,165,170,176,178,181,201,206,207,208,229,230,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,154,65,65,65,65,65,65,65,65,65,65,65,65,]),'gexp':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,137,165,170,176,178,181,201,206,207,208,229,230,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'mexp':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,115,124,137,165,170,176,178,181,201,206,207,208,229,230,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,155,157,69,69,69,69,69,69,69,69,69,69,69,69,]),'termino':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,115,124,129,137,165,170,176,178,181,201,206,207,208,229,230,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,158,70,70,70,70,70,70,70,70,70,70,70,70,]),'factor':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,115,124,129,137,165,170,176,178,181,201,206,207,208,229,230,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'ctes':([42,48,50,51,52,53,54,55,56,57,94,96,98,99,100,104,107,108,111,115,124,129,137,165,170,176,178,181,201,206,207,208,229,230,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'insertParams':([44,],[77,]),'estatutop':([50,51,52,53,54,55,56,57,],[83,86,87,88,89,90,91,92,]),'ididx':([58,77,101,141,204,],[93,134,150,168,214,]),'varFor':([64,],[101,]),'expp':([65,],[103,]),'factorp':([66,81,],[106,106,]),'texpp':([68,],[110,]),'andCheck':([68,],[111,]),'gexpp':([69,],[114,]),'addPO':([69,],[115,]),'mexpp':([70,],[123,]),'operSR':([70,],[124,]),'terminop':([71,],[128,]),'oper':([71,],[129,]),'igualAs':([93,],[137,]),'readId':([97,189,],[141,204,]),'escriturap':([98,170,],[143,192,]),'pushEsc':([98,170,],[144,144,]),'paramsp':([134,],[160,]),'asigpp':([137,],[163,]),'escriturapp':([143,],[169,]),'checkCond':([148,],[172,]),'checkWhileCond':([149,],[174,]),'factorpp':([152,197,],[177,210,]),'addsize':([159,],[181,]),'asigp':([165,201,],[184,212,]),'lecturapp':([168,214,],[188,219,]),'asigppp':([185,],[200,]),'initFor':([195,],[208,]),'endfunction':([211,],[218,]),'beforeDo':([217,],[222,]),'condpp':([220,],[225,]),'checkElse':([220,],[226,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM agregarTablaFunciones varss funcs MAIN APAR CPAR ALLA poptomain estatutos CLLA','program',11,'p_program','lex.py',540),
  ('agregarTablaFunciones -> ID PTCOMA','agregarTablaFunciones',2,'p_agregarTablaFunciones','lex.py',544),
  ('poptomain -> <empty>','poptomain',0,'p_poptomain','lex.py',557),
  ('varss -> VARS vars','varss',2,'p_varss','lex.py',571),
  ('varss -> empty','varss',1,'p_varss','lex.py',572),
  ('vars -> tipo DOSPNTS insertVar varsppp varspp vars','vars',6,'p_vars','lex.py',577),
  ('vars -> empty','vars',1,'p_vars','lex.py',578),
  ('insertVar -> ID','insertVar',1,'p_insertVar','lex.py',582),
  ('varsppp -> ACOR CTEI CCOR','varsppp',3,'p_varsppp','lex.py',592),
  ('varsppp -> empty','varsppp',1,'p_varsppp','lex.py',593),
  ('varspp -> PTCOMA','varspp',1,'p_varspp','lex.py',599),
  ('varspp -> COMA insertVar varsppp varspp','varspp',4,'p_varspp','lex.py',600),
  ('funcs -> FUNCTION funcsp insertFunc funcspp','funcs',4,'p_funcs','lex.py',607),
  ('funcs -> empty','funcs',1,'p_funcs','lex.py',608),
  ('insertFunc -> ID','insertFunc',1,'p_insertFunc','lex.py',612),
  ('funcspp -> APAR params CPAR PTCOMA varss ALLA addsize estatutos CLLA endfunction funcs','funcspp',11,'p_funcspp','lex.py',621),
  ('endfunction -> <empty>','endfunction',0,'p_endfunciton','lex.py',626),
  ('addsize -> <empty>','addsize',0,'p_addsize','lex.py',644),
  ('funcsp -> VOID','funcsp',1,'p_funcsp','lex.py',662),
  ('funcsp -> tipo','funcsp',1,'p_funcsp','lex.py',663),
  ('estatutos -> asig estatutop','estatutos',2,'p_estatutos','lex.py',676),
  ('estatutos -> return estatutop','estatutos',2,'p_estatutos','lex.py',677),
  ('estatutos -> lectura estatutop','estatutos',2,'p_estatutos','lex.py',678),
  ('estatutos -> escritura estatutop','estatutos',2,'p_estatutos','lex.py',679),
  ('estatutos -> cond estatutop','estatutos',2,'p_estatutos','lex.py',680),
  ('estatutos -> while estatutop','estatutos',2,'p_estatutos','lex.py',681),
  ('estatutos -> for estatutop','estatutos',2,'p_estatutos','lex.py',682),
  ('estatutos -> exp estatutop','estatutos',2,'p_estatutos','lex.py',683),
  ('estatutop -> estatutos','estatutop',1,'p_estatutop','lex.py',690),
  ('estatutop -> empty','estatutop',1,'p_estatutop','lex.py',691),
  ('tipo -> INT','tipo',1,'p_tipo','lex.py',698),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lex.py',699),
  ('tipo -> CHAR','tipo',1,'p_tipo','lex.py',700),
  ('params -> tipo DOSPNTS insertParams ididx paramsp','params',5,'p_params','lex.py',711),
  ('params -> empty','params',1,'p_params','lex.py',712),
  ('insertParams -> ID','insertParams',1,'p_insertParams','lex.py',716),
  ('paramsp -> COMA params','paramsp',2,'p_paramsp','lex.py',730),
  ('paramsp -> empty','paramsp',1,'p_paramsp','lex.py',731),
  ('asig -> varAs ididx igualAs asigpp PTCOMA','asig',5,'p_asig','lex.py',738),
  ('varAs -> ID','varAs',1,'p_varAs','lex.py',753),
  ('igualAs -> IGUAL','igualAs',1,'p_igualAs','lex.py',762),
  ('asigp -> exp asigppp','asigp',2,'p_asigp','lex.py',778),
  ('asigp -> empty','asigp',1,'p_asigp','lex.py',779),
  ('asigppp -> COMA asigp','asigppp',2,'p_asigppp','lex.py',787),
  ('asigppp -> empty','asigppp',1,'p_asigppp','lex.py',788),
  ('asigpp -> exp','asigpp',1,'p_asigpp','lex.py',794),
  ('asigpp -> ACOR asigp CCOR','asigpp',3,'p_asigpp','lex.py',795),
  ('ididx -> ACOR exp CCOR','ididx',3,'p_ididx','lex.py',803),
  ('ididx -> empty','ididx',1,'p_ididx','lex.py',804),
  ('return -> RETURN APAR exp CPAR PTCOMA','return',5,'p_return','lex.py',830),
  ('lectura -> READ APAR readId ididx lecturapp CPAR PTCOMA','lectura',7,'p_lectura','lex.py',845),
  ('readId -> ID','readId',1,'p_readId','lex.py',849),
  ('lecturapp -> COMA readId ididx lecturapp','lecturapp',4,'p_lecturapp','lex.py',857),
  ('lecturapp -> empty','lecturapp',1,'p_lecturapp','lex.py',858),
  ('escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA','escritura',6,'p_escritura','lex.py',865),
  ('escriturap -> pushEsc','escriturap',1,'p_escriturap','lex.py',870),
  ('escriturap -> exp','escriturap',1,'p_escriturap','lex.py',871),
  ('pushEsc -> STRING','pushEsc',1,'p_pushEsc','lex.py',882),
  ('pushEsc -> CTEC','pushEsc',1,'p_pushEsc','lex.py',883),
  ('escriturapp -> COMA escriturap','escriturapp',2,'p_escriturapp','lex.py',891),
  ('escriturapp -> empty','escriturapp',1,'p_escriturapp','lex.py',892),
  ('cond -> IF APAR exp checkCond THEN ALLA estatutos CLLA condpp','cond',9,'p_cond','lex.py',898),
  ('condpp -> checkElse ALLA estatutos CLLA','condpp',4,'p_condpp','lex.py',911),
  ('condpp -> empty','condpp',1,'p_condpp','lex.py',912),
  ('checkElse -> ELSE','checkElse',1,'p_checkElse','lex.py',918),
  ('checkCond -> CPAR','checkCond',1,'p_checkCond','lex.py',934),
  ('while -> saveWhile APAR exp checkWhileCond DO ALLA estatutos CLLA','while',8,'p_while','lex.py',952),
  ('saveWhile -> WHILE','saveWhile',1,'p_saveWhile','lex.py',967),
  ('checkWhileCond -> CPAR','checkWhileCond',1,'p_checkWhileCond','lex.py',974),
  ('for -> FOR varFor ididx IGUAL exp initFor exp beforeDo ALLA estatutos CLLA','for',11,'p_for','lex.py',995),
  ('varFor -> ID','varFor',1,'p_varFor','lex.py',1021),
  ('initFor -> TO','initFor',1,'p_initFor','lex.py',1036),
  ('beforeDo -> DO','beforeDo',1,'p_beforeDo','lex.py',1052),
  ('exp -> texp expp','exp',2,'p_exp','lex.py',1078),
  ('expp -> OR exp','expp',2,'p_expp','lex.py',1082),
  ('expp -> empty','expp',1,'p_expp','lex.py',1083),
  ('texp -> gexp texpp','texp',2,'p_texp','lex.py',1087),
  ('texpp -> andCheck texp','texpp',2,'p_texpp','lex.py',1091),
  ('texpp -> empty','texpp',1,'p_texpp','lex.py',1092),
  ('andCheck -> AND','andCheck',1,'p_andCheck','lex.py',1095),
  ('gexp -> mexp gexpp','gexp',2,'p_gexp','lex.py',1101),
  ('gexpp -> addPO mexp','gexpp',2,'p_gexpp','lex.py',1124),
  ('gexpp -> empty','gexpp',1,'p_gexpp','lex.py',1125),
  ('addPO -> MAYQ','addPO',1,'p_addPO','lex.py',1128),
  ('addPO -> MENQ','addPO',1,'p_addPO','lex.py',1129),
  ('addPO -> MAYI','addPO',1,'p_addPO','lex.py',1130),
  ('addPO -> MENI','addPO',1,'p_addPO','lex.py',1131),
  ('addPO -> IGUAL IGUAL','addPO',2,'p_addPO','lex.py',1132),
  ('addPO -> DIF','addPO',1,'p_addPO','lex.py',1133),
  ('mexp -> termino mexpp','mexp',2,'p_mexp','lex.py',1139),
  ('mexpp -> operSR mexp','mexpp',2,'p_mexpp','lex.py',1165),
  ('mexpp -> empty','mexpp',1,'p_mexpp','lex.py',1166),
  ('operSR -> MENOS','operSR',1,'p_operSR','lex.py',1171),
  ('operSR -> MAS','operSR',1,'p_operSR','lex.py',1172),
  ('termino -> factor terminop','termino',2,'p_termino','lex.py',1180),
  ('terminop -> oper termino','terminop',2,'p_terminop','lex.py',1204),
  ('terminop -> empty','terminop',1,'p_terminop','lex.py',1205),
  ('oper -> DIV','oper',1,'p_oper','lex.py',1210),
  ('oper -> POR','oper',1,'p_oper','lex.py',1211),
  ('factor -> APAR exp CPAR','factor',3,'p_factor','lex.py',1218),
  ('factor -> ctes','factor',1,'p_factor','lex.py',1219),
  ('factorp -> APAR exp factorpp CPAR','factorp',4,'p_factorp','lex.py',1256),
  ('factorp -> ACOR exp CCOR','factorp',3,'p_factorp','lex.py',1257),
  ('factorp -> empty','factorp',1,'p_factorp','lex.py',1258),
  ('factorpp -> COMA exp factorpp','factorpp',3,'p_factorpp','lex.py',1266),
  ('factorpp -> empty','factorpp',1,'p_factorpp','lex.py',1267),
  ('ctes -> CTEC','ctes',1,'p_ctes','lex.py',1274),
  ('ctes -> CTEI','ctes',1,'p_ctes','lex.py',1275),
  ('ctes -> CTEF','ctes',1,'p_ctes','lex.py',1276),
  ('ctes -> ID factorp','ctes',2,'p_ctes','lex.py',1277),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',1293),
]
