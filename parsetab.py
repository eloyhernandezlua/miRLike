
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACOR ALLA AND APAR BOOL CCOR CHAR CLLA COMA CPAR CTEC CTEF CTEI DIF DIV DO DOSPNTS ELSE FALSE FLOAT FOR FUNCTION ID IF IGUAL IGUALIGUAL INT MAIN MAS MAYI MAYQ MENI MENOS MENQ NOT OR POR PROGRAM PTCOMA READ RETURN STR STRING THEN TO TRUE VARS VOID WHILE WRITEprogram : PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLAvarss : VARS vars\n             | empty\n    vars : tipo DOSPNTS varsp varspp vars\n            | empty\n    varsp : ID varspppvarsppp : ACOR CTEI CCOR\n               | empty\n    varspp : PTCOMA\n              | COMA varsp varspp\n    funcs : FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs\n             | empty\n    funcsp : VOID\n              | tipo\n    estatutos : asig estatutop\n                 | llamada estatutop\n                 | return estatutop\n                 | lectura estatutop\n                 | escritura estatutop\n                 | cond estatutop\n                 | while estatutop\n                 | for estatutop\n                 | exp estatutop\n    estatutop : estatutos\n                 | empty\n    tipo : INT\n            | FLOAT\n            | CHAR\n            | STR\n            | BOOL\n    params : tipo DOSPNTS ID ididx paramsp\n              | empty\n    paramsp : COMA params\n               | empty\n    asig : ID ididx IGUAL asigpp PTCOMAasigp : exp asigppp\n             | expbool asigppp\n             | CTEC asigppp\n             | STRING asigppp\n             | empty\n    asigppp : COMA asigp\n               | empty\n    asigpp : exp\n              | expbool\n              | CTEC\n              | STRING\n              | ACOR asigp CCOR\n    ididx : ACOR exp CCOR\n             | empty\n    llamada : ID APAR args CPAR PTCOMAargs : ctes argsp\n            | exp argsp\n            | expbool argsp\n            | STRING argsp\n            | CTEC argsp\n    argsp : COMA args\n             | empty\n    return : RETURN APAR asigpp CPAR PTCOMAlectura : READ APAR ID ididx lecturapp CPAR PTCOMAlecturapp : COMA ID ididx lecturapp\n                 | empty\n    escritura : WRITE APAR escriturap escriturapp CPAR PTCOMAescriturap : STRING\n                  | exp\n                  | expbool\n                  | CTEC\n    escriturapp : COMA escriturap\n                   | empty\n    cond : IF APAR condp CPAR THEN ALLA estatutos CLLA condppcondp : expbool\n             | TRUE\n             | FALSE\n    condpp : ELSE ALLA estatutos CLLA\n              | empty\n    while : WHILE APAR condp CPAR DO ALLA estatutos CLLAfor : FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLAexp : termino exppexpp : MAS exp\n            | MENOS exp\n            | empty\n    termino : factor terminopterminop : POR termino\n                | DIV termino\n                | empty\n    factor : APAR exp CPAR\n              | ID factorp\n              | ctes\n    factorp : \n               | APAR exp factorpp CPAR\n               | ACOR exp CCOR\n               | empty\n    factorpp : COMA exp factorpp\n                | empty\n    expbool : exp expboolp exp expboolppexpboolp : MAYQ\n                | MENQ\n                | MAYI\n                | MENI\n                | IGUALIGUAL\n                | DIF\n    expboolpp : AND expbool\n                 | OR expbool\n                 | NOT expbool\n                 | empty\n    ctes : ID factorp\n            | CTEI\n            | CTEF\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,77,],[0,-1,]),'ID':([2,14,15,16,17,18,20,21,22,23,32,36,43,44,46,47,48,49,50,51,52,53,54,60,61,62,63,64,65,67,71,72,73,74,76,89,90,91,92,93,95,96,97,98,99,100,101,102,105,114,115,116,117,123,137,139,140,141,142,150,151,153,154,155,156,157,158,160,165,177,181,183,187,188,189,194,196,197,200,206,217,218,219,226,227,228,229,234,241,242,244,246,247,248,251,252,],[3,-26,-27,-28,-29,-30,25,-13,-14,27,27,43,-88,76,43,43,43,43,43,43,43,43,43,94,-108,-108,-87,-106,-107,104,106,-86,76,-91,-88,76,124,76,76,76,-77,76,76,-80,-81,76,76,-84,76,-85,76,76,-91,76,76,-78,-79,-82,-83,76,106,-95,-96,-97,-98,-99,-100,106,-90,76,76,43,-35,-50,-89,76,-90,-58,76,225,76,76,76,-62,43,43,76,-59,-108,-75,-69,-74,43,43,-76,-73,]),'PTCOMA':([3,26,27,33,35,41,61,62,63,64,65,66,69,72,76,95,98,99,102,114,117,119,120,121,122,139,140,141,142,145,147,168,189,190,196,198,208,216,220,224,231,232,233,],[4,31,-108,-6,-8,31,-108,-108,-87,-106,-107,103,-7,-86,-88,-77,-80,-81,-84,-85,-91,-43,-44,-45,-46,-78,-79,-82,-83,187,188,197,-89,-108,-90,-47,226,-94,-104,234,-101,-102,-103,]),'VARS':([4,103,],[6,6,]),'FUNCTION':([4,5,6,7,11,13,30,31,40,68,230,],[-108,9,-108,-3,-2,-5,-108,-9,-4,-10,9,]),'MAIN':([4,5,6,7,8,10,11,13,30,31,40,68,230,239,],[-108,-108,-108,-3,19,-12,-2,-5,-108,-9,-4,-10,-108,-11,]),'INT':([6,9,29,30,31,68,185,],[14,14,14,14,-9,-10,14,]),'FLOAT':([6,9,29,30,31,68,185,],[15,15,15,15,-9,-10,15,]),'CHAR':([6,9,29,30,31,68,185,],[16,16,16,16,-9,-10,16,]),'STR':([6,9,29,30,31,68,185,],[17,17,17,17,-9,-10,17,]),'BOOL':([6,9,29,30,31,68,185,],[18,18,18,18,-9,-10,18,]),'ALLA':([6,7,11,13,28,30,31,40,68,103,143,210,211,243,245,],[-108,-3,-2,-5,36,-108,-9,-4,-10,-108,183,227,228,247,248,]),'VOID':([9,],[21,]),'DOSPNTS':([12,14,15,16,17,18,38,],[23,-26,-27,-28,-29,-30,67,]),'APAR':([19,25,36,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,71,72,73,74,76,89,91,92,93,95,96,97,98,99,100,101,102,105,106,114,115,116,117,123,137,139,140,141,142,150,151,153,154,155,156,157,158,160,165,177,181,183,187,188,189,194,196,197,200,217,218,219,226,227,228,229,234,241,242,244,246,247,248,251,252,],[24,29,44,71,44,44,44,44,44,44,44,44,44,44,89,90,91,92,93,-108,-108,-87,-106,-107,44,-86,44,-91,115,44,44,44,44,-77,44,44,-80,-81,44,44,-84,44,115,-85,44,44,-91,44,44,-78,-79,-82,-83,44,44,-95,-96,-97,-98,-99,-100,44,-90,44,44,44,-35,-50,-89,44,-90,-58,44,44,44,44,-62,44,44,44,-59,-108,-75,-69,-74,44,44,-76,-73,]),'CPAR':([24,29,37,39,61,62,63,64,65,72,75,76,95,98,99,102,104,106,107,108,109,110,111,112,114,117,118,119,120,121,122,124,125,126,127,128,129,130,131,132,133,135,138,139,140,141,142,144,146,148,149,152,159,161,162,163,164,166,175,176,178,184,185,186,189,190,191,192,193,195,196,198,205,207,209,213,215,216,220,221,222,225,231,232,233,235,240,],[28,-108,66,-32,-108,-108,-87,-106,-107,-86,114,-88,-77,-80,-81,-84,-108,-88,147,-108,-87,-108,-108,-108,-85,-91,168,-43,-44,-45,-46,-108,-108,-63,-64,-65,-66,179,-70,-71,-72,180,-49,-78,-79,-82,-83,-108,-86,189,-52,-57,-51,-57,-53,-54,-55,-108,-108,208,-68,-31,-108,-34,-89,-108,-108,-56,-108,-93,-90,-47,224,-61,-67,-48,-33,-94,-104,-92,-108,-108,-101,-102,-103,-108,-60,]),'COMA':([26,27,33,35,41,61,62,63,64,65,69,72,76,95,98,99,102,104,106,108,109,110,111,112,114,117,124,125,126,127,128,129,138,139,140,141,142,144,146,166,170,171,172,173,175,189,190,191,193,196,213,216,220,222,225,231,232,233,235,],[32,-108,-6,-8,32,-108,-108,-87,-106,-107,-7,-86,-88,-77,-80,-81,-84,-108,-88,151,160,160,160,160,-85,-91,-108,177,-63,-64,-65,-66,-49,-78,-79,-82,-83,185,-86,194,200,200,200,200,206,-89,-108,151,160,-90,-48,-94,-104,194,-108,-101,-102,-103,206,]),'ACOR':([27,43,76,89,94,104,105,106,124,225,],[34,73,116,123,137,137,123,116,137,137,]),'CTEI':([34,36,43,44,46,47,48,49,50,51,52,53,54,61,62,63,64,65,71,72,73,74,76,89,91,92,93,95,96,97,98,99,100,101,102,105,114,115,116,117,123,137,139,140,141,142,150,151,153,154,155,156,157,158,160,165,177,181,183,187,188,189,194,196,197,200,217,218,219,226,227,228,229,234,241,242,244,246,247,248,251,252,],[42,64,-88,64,64,64,64,64,64,64,64,64,64,-108,-108,-87,-106,-107,64,-86,64,-91,-88,64,64,64,64,-77,64,64,-80,-81,64,64,-84,64,-85,64,64,-91,64,64,-78,-79,-82,-83,64,64,-95,-96,-97,-98,-99,-100,64,-90,64,64,64,-35,-50,-89,64,-90,-58,64,64,64,64,-62,64,64,64,-59,-108,-75,-69,-74,64,64,-76,-73,]),'RETURN':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[55,-88,55,55,55,55,55,55,55,55,55,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,55,-35,-50,-89,-90,-58,-62,55,55,-59,-108,-75,-69,-74,55,55,-76,-73,]),'READ':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[56,-88,56,56,56,56,56,56,56,56,56,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,56,-35,-50,-89,-90,-58,-62,56,56,-59,-108,-75,-69,-74,56,56,-76,-73,]),'WRITE':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[57,-88,57,57,57,57,57,57,57,57,57,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,57,-35,-50,-89,-90,-58,-62,57,57,-59,-108,-75,-69,-74,57,57,-76,-73,]),'IF':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[58,-88,58,58,58,58,58,58,58,58,58,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,58,-35,-50,-89,-90,-58,-62,58,58,-59,-108,-75,-69,-74,58,58,-76,-73,]),'WHILE':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[59,-88,59,59,59,59,59,59,59,59,59,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,59,-35,-50,-89,-90,-58,-62,59,59,-59,-108,-75,-69,-74,59,59,-76,-73,]),'FOR':([36,43,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,95,98,99,102,114,117,139,140,141,142,165,183,187,188,189,196,197,226,227,228,234,241,242,244,246,247,248,251,252,],[60,-88,60,60,60,60,60,60,60,60,60,-108,-108,-87,-106,-107,-86,-91,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,60,-35,-50,-89,-90,-58,-62,60,60,-59,-108,-75,-69,-74,60,60,-76,-73,]),'CTEF':([36,43,44,46,47,48,49,50,51,52,53,54,61,62,63,64,65,71,72,73,74,76,89,91,92,93,95,96,97,98,99,100,101,102,105,114,115,116,117,123,137,139,140,141,142,150,151,153,154,155,156,157,158,160,165,177,181,183,187,188,189,194,196,197,200,217,218,219,226,227,228,229,234,241,242,244,246,247,248,251,252,],[65,-88,65,65,65,65,65,65,65,65,65,65,-108,-108,-87,-106,-107,65,-86,65,-91,-88,65,65,65,65,-77,65,65,-80,-81,65,65,-84,65,-85,65,65,-91,65,65,-78,-79,-82,-83,65,65,-95,-96,-97,-98,-99,-100,65,-90,65,65,65,-35,-50,-89,65,-90,-58,65,65,65,65,-62,65,65,65,-59,-108,-75,-69,-74,65,65,-76,-73,]),'CCOR':([42,61,62,63,64,65,72,76,95,98,99,102,113,114,117,123,139,140,141,142,167,169,170,171,172,173,174,182,189,190,196,199,200,201,202,203,204,216,220,223,231,232,233,],[69,-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,165,-85,-91,-108,-78,-79,-82,-83,196,198,-108,-108,-108,-108,-40,213,-89,-108,-90,-36,-108,-42,-37,-38,-39,-94,-104,-41,-101,-102,-103,]),'POR':([43,62,63,64,65,72,74,76,106,109,114,117,146,165,189,196,],[-88,100,-87,-106,-107,-86,-91,-88,-88,-87,-85,-91,-86,-90,-89,-90,]),'DIV':([43,62,63,64,65,72,74,76,106,109,114,117,146,165,189,196,],[-88,101,-87,-106,-107,-86,-91,-88,-88,-87,-85,-91,-86,-90,-89,-90,]),'MAS':([43,61,62,63,64,65,72,74,76,99,102,106,109,114,117,141,142,146,165,189,196,],[-88,96,-108,-87,-106,-107,-86,-91,-88,-81,-84,-88,-87,-85,-91,-82,-83,-86,-90,-89,-90,]),'MENOS':([43,61,62,63,64,65,72,74,76,99,102,106,109,114,117,141,142,146,165,189,196,],[-88,97,-108,-87,-106,-107,-86,-91,-88,-81,-84,-88,-87,-85,-91,-82,-83,-86,-90,-89,-90,]),'CLLA':([43,45,46,47,48,49,50,51,52,53,54,61,62,63,64,65,72,74,76,78,79,80,81,82,83,84,85,86,87,88,95,98,99,102,114,117,139,140,141,142,165,187,188,189,196,197,214,226,234,236,237,241,242,244,246,249,250,251,252,],[-88,77,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-108,-87,-106,-107,-86,-91,-88,-15,-24,-25,-16,-17,-18,-19,-20,-21,-22,-23,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-90,-35,-50,-89,-90,-58,230,-62,-59,241,242,-108,-75,-69,-74,251,252,-76,-73,]),'IGUAL':([43,70,74,94,136,138,165,213,],[-108,105,-49,-108,181,-49,-48,-48,]),'MAYQ':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,153,-87,-85,-91,153,153,153,-78,-79,-82,-83,-86,153,-89,153,153,-90,]),'MENQ':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,154,-87,-85,-91,154,154,154,-78,-79,-82,-83,-86,154,-89,154,154,-90,]),'MAYI':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,155,-87,-85,-91,155,155,155,-78,-79,-82,-83,-86,155,-89,155,155,-90,]),'MENI':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,156,-87,-85,-91,156,156,156,-78,-79,-82,-83,-86,156,-89,156,156,-90,]),'IGUALIGUAL':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,157,-87,-85,-91,157,157,157,-78,-79,-82,-83,-86,157,-89,157,157,-90,]),'DIF':([61,62,63,64,65,72,76,95,98,99,102,106,108,109,114,117,119,127,134,139,140,141,142,146,170,189,191,193,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-88,158,-87,-85,-91,158,158,158,-78,-79,-82,-83,-86,158,-89,158,158,-90,]),'AND':([61,62,63,64,65,72,76,95,98,99,102,114,117,139,140,141,142,189,190,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-89,217,-90,]),'OR':([61,62,63,64,65,72,76,95,98,99,102,114,117,139,140,141,142,189,190,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-89,218,-90,]),'NOT':([61,62,63,64,65,72,76,95,98,99,102,114,117,139,140,141,142,189,190,196,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-89,219,-90,]),'TO':([61,62,63,64,65,72,76,95,98,99,102,114,117,139,140,141,142,189,196,212,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,-89,-90,229,]),'DO':([61,62,63,64,65,72,76,95,98,99,102,114,117,139,140,141,142,180,189,196,238,],[-108,-108,-87,-106,-107,-86,-88,-77,-80,-81,-84,-85,-91,-78,-79,-82,-83,211,-89,-90,243,]),'STRING':([71,89,91,105,123,151,160,177,200,],[111,122,126,122,173,111,111,126,173,]),'CTEC':([71,89,91,105,123,151,160,177,200,],[112,121,129,121,172,112,112,129,172,]),'TRUE':([92,93,],[132,132,]),'FALSE':([92,93,],[133,133,]),'THEN':([179,],[210,]),'ELSE':([241,],[245,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'varss':([4,103,],[5,143,]),'empty':([4,5,6,27,29,30,43,46,47,48,49,50,51,52,53,54,61,62,76,94,103,104,106,108,109,110,111,112,123,124,125,144,166,170,171,172,173,175,185,190,191,193,200,222,225,230,235,241,],[7,10,13,35,39,13,74,80,80,80,80,80,80,80,80,80,98,102,117,138,7,138,117,152,161,161,161,161,174,138,178,186,195,201,201,201,201,207,39,220,152,161,174,195,138,10,207,246,]),'funcs':([5,230,],[8,239,]),'vars':([6,30,],[11,40,]),'tipo':([6,9,29,30,185,],[12,22,38,12,38,]),'funcsp':([9,],[20,]),'varsp':([23,32,],[26,41,]),'varspp':([26,41,],[30,68,]),'varsppp':([27,],[33,]),'params':([29,185,],[37,215,]),'estatutos':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[45,79,79,79,79,79,79,79,79,79,214,236,237,249,250,]),'asig':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'llamada':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'return':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'lectura':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'escritura':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'cond':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'while':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'for':([36,46,47,48,49,50,51,52,53,54,183,227,228,247,248,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'exp':([36,44,46,47,48,49,50,51,52,53,54,71,73,89,91,92,93,96,97,105,115,116,123,137,150,151,160,177,181,183,194,200,217,218,219,227,228,229,247,248,],[54,75,54,54,54,54,54,54,54,54,54,108,113,119,127,134,134,139,140,119,166,167,170,182,190,191,193,127,212,54,222,170,134,134,134,54,54,238,54,54,]),'termino':([36,44,46,47,48,49,50,51,52,53,54,71,73,89,91,92,93,96,97,100,101,105,115,116,123,137,150,151,160,177,181,183,194,200,217,218,219,227,228,229,247,248,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,141,142,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'factor':([36,44,46,47,48,49,50,51,52,53,54,71,73,89,91,92,93,96,97,100,101,105,115,116,123,137,150,151,160,177,181,183,194,200,217,218,219,227,228,229,247,248,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'ctes':([36,44,46,47,48,49,50,51,52,53,54,71,73,89,91,92,93,96,97,100,101,105,115,116,123,137,150,151,160,177,181,183,194,200,217,218,219,227,228,229,247,248,],[63,63,63,63,63,63,63,63,63,63,63,109,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,109,109,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'ididx':([43,94,104,124,225,],[70,136,144,175,235,]),'factorp':([43,76,106,],[72,72,146,]),'estatutop':([46,47,48,49,50,51,52,53,54,],[78,81,82,83,84,85,86,87,88,]),'expp':([61,],[95,]),'terminop':([62,],[99,]),'args':([71,151,160,],[107,192,192,]),'expbool':([71,89,91,92,93,105,123,151,160,177,200,217,218,219,],[110,120,128,131,131,120,171,110,110,128,171,231,232,233,]),'asigpp':([89,105,],[118,145,]),'escriturap':([91,177,],[125,209,]),'condp':([92,93,],[130,135,]),'factorpp':([108,166,191,222,],[148,148,221,221,]),'argsp':([108,109,110,111,112,191,193,],[149,159,162,163,164,149,149,]),'expboolp':([108,119,127,134,170,191,193,],[150,150,150,150,150,150,150,]),'asigp':([123,200,],[169,223,]),'escriturapp':([125,],[176,]),'paramsp':([144,],[184,]),'asigppp':([170,171,172,173,],[199,202,203,204,]),'lecturapp':([175,235,],[205,240,]),'expboolpp':([190,],[216,]),'condpp':([241,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA','program',11,'p_program','lex.py',133),
  ('varss -> VARS vars','varss',2,'p_varss','lex.py',139),
  ('varss -> empty','varss',1,'p_varss','lex.py',140),
  ('vars -> tipo DOSPNTS varsp varspp vars','vars',5,'p_vars','lex.py',145),
  ('vars -> empty','vars',1,'p_vars','lex.py',146),
  ('varsp -> ID varsppp','varsp',2,'p_varsp','lex.py',151),
  ('varsppp -> ACOR CTEI CCOR','varsppp',3,'p_varsppp','lex.py',155),
  ('varsppp -> empty','varsppp',1,'p_varsppp','lex.py',156),
  ('varspp -> PTCOMA','varspp',1,'p_varspp','lex.py',162),
  ('varspp -> COMA varsp varspp','varspp',3,'p_varspp','lex.py',163),
  ('funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs','funcs',12,'p_funcs','lex.py',170),
  ('funcs -> empty','funcs',1,'p_funcs','lex.py',171),
  ('funcsp -> VOID','funcsp',1,'p_funcsp','lex.py',179),
  ('funcsp -> tipo','funcsp',1,'p_funcsp','lex.py',180),
  ('estatutos -> asig estatutop','estatutos',2,'p_estatutos','lex.py',187),
  ('estatutos -> llamada estatutop','estatutos',2,'p_estatutos','lex.py',188),
  ('estatutos -> return estatutop','estatutos',2,'p_estatutos','lex.py',189),
  ('estatutos -> lectura estatutop','estatutos',2,'p_estatutos','lex.py',190),
  ('estatutos -> escritura estatutop','estatutos',2,'p_estatutos','lex.py',191),
  ('estatutos -> cond estatutop','estatutos',2,'p_estatutos','lex.py',192),
  ('estatutos -> while estatutop','estatutos',2,'p_estatutos','lex.py',193),
  ('estatutos -> for estatutop','estatutos',2,'p_estatutos','lex.py',194),
  ('estatutos -> exp estatutop','estatutos',2,'p_estatutos','lex.py',195),
  ('estatutop -> estatutos','estatutop',1,'p_estatutop','lex.py',201),
  ('estatutop -> empty','estatutop',1,'p_estatutop','lex.py',202),
  ('tipo -> INT','tipo',1,'p_tipo','lex.py',209),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lex.py',210),
  ('tipo -> CHAR','tipo',1,'p_tipo','lex.py',211),
  ('tipo -> STR','tipo',1,'p_tipo','lex.py',212),
  ('tipo -> BOOL','tipo',1,'p_tipo','lex.py',213),
  ('params -> tipo DOSPNTS ID ididx paramsp','params',5,'p_params','lex.py',219),
  ('params -> empty','params',1,'p_params','lex.py',220),
  ('paramsp -> COMA params','paramsp',2,'p_paramsp','lex.py',225),
  ('paramsp -> empty','paramsp',1,'p_paramsp','lex.py',226),
  ('asig -> ID ididx IGUAL asigpp PTCOMA','asig',5,'p_asig','lex.py',233),
  ('asigp -> exp asigppp','asigp',2,'p_asigp','lex.py',247),
  ('asigp -> expbool asigppp','asigp',2,'p_asigp','lex.py',248),
  ('asigp -> CTEC asigppp','asigp',2,'p_asigp','lex.py',249),
  ('asigp -> STRING asigppp','asigp',2,'p_asigp','lex.py',250),
  ('asigp -> empty','asigp',1,'p_asigp','lex.py',251),
  ('asigppp -> COMA asigp','asigppp',2,'p_asigppp','lex.py',259),
  ('asigppp -> empty','asigppp',1,'p_asigppp','lex.py',260),
  ('asigpp -> exp','asigpp',1,'p_asigpp','lex.py',266),
  ('asigpp -> expbool','asigpp',1,'p_asigpp','lex.py',267),
  ('asigpp -> CTEC','asigpp',1,'p_asigpp','lex.py',268),
  ('asigpp -> STRING','asigpp',1,'p_asigpp','lex.py',269),
  ('asigpp -> ACOR asigp CCOR','asigpp',3,'p_asigpp','lex.py',270),
  ('ididx -> ACOR exp CCOR','ididx',3,'p_ididx','lex.py',276),
  ('ididx -> empty','ididx',1,'p_ididx','lex.py',277),
  ('llamada -> ID APAR args CPAR PTCOMA','llamada',5,'p_llamada','lex.py',283),
  ('args -> ctes argsp','args',2,'p_args','lex.py',289),
  ('args -> exp argsp','args',2,'p_args','lex.py',290),
  ('args -> expbool argsp','args',2,'p_args','lex.py',291),
  ('args -> STRING argsp','args',2,'p_args','lex.py',292),
  ('args -> CTEC argsp','args',2,'p_args','lex.py',293),
  ('argsp -> COMA args','argsp',2,'p_argsp','lex.py',298),
  ('argsp -> empty','argsp',1,'p_argsp','lex.py',299),
  ('return -> RETURN APAR asigpp CPAR PTCOMA','return',5,'p_return','lex.py',305),
  ('lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA','lectura',7,'p_lectura','lex.py',311),
  ('lecturapp -> COMA ID ididx lecturapp','lecturapp',4,'p_lecturapp','lex.py',315),
  ('lecturapp -> empty','lecturapp',1,'p_lecturapp','lex.py',316),
  ('escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA','escritura',6,'p_escritura','lex.py',323),
  ('escriturap -> STRING','escriturap',1,'p_escriturap','lex.py',327),
  ('escriturap -> exp','escriturap',1,'p_escriturap','lex.py',328),
  ('escriturap -> expbool','escriturap',1,'p_escriturap','lex.py',329),
  ('escriturap -> CTEC','escriturap',1,'p_escriturap','lex.py',330),
  ('escriturapp -> COMA escriturap','escriturapp',2,'p_escriturapp','lex.py',335),
  ('escriturapp -> empty','escriturapp',1,'p_escriturapp','lex.py',336),
  ('cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp','cond',9,'p_cond','lex.py',342),
  ('condp -> expbool','condp',1,'p_condp','lex.py',346),
  ('condp -> TRUE','condp',1,'p_condp','lex.py',347),
  ('condp -> FALSE','condp',1,'p_condp','lex.py',348),
  ('condpp -> ELSE ALLA estatutos CLLA','condpp',4,'p_condpp','lex.py',353),
  ('condpp -> empty','condpp',1,'p_condpp','lex.py',354),
  ('while -> WHILE APAR condp CPAR DO ALLA estatutos CLLA','while',8,'p_while','lex.py',360),
  ('for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA','for',11,'p_for','lex.py',366),
  ('exp -> termino expp','exp',2,'p_exp','lex.py',371),
  ('expp -> MAS exp','expp',2,'p_expp','lex.py',375),
  ('expp -> MENOS exp','expp',2,'p_expp','lex.py',376),
  ('expp -> empty','expp',1,'p_expp','lex.py',377),
  ('termino -> factor terminop','termino',2,'p_termino','lex.py',383),
  ('terminop -> POR termino','terminop',2,'p_terminop','lex.py',387),
  ('terminop -> DIV termino','terminop',2,'p_terminop','lex.py',388),
  ('terminop -> empty','terminop',1,'p_terminop','lex.py',389),
  ('factor -> APAR exp CPAR','factor',3,'p_factor','lex.py',395),
  ('factor -> ID factorp','factor',2,'p_factor','lex.py',396),
  ('factor -> ctes','factor',1,'p_factor','lex.py',397),
  ('factorp -> <empty>','factorp',0,'p_factorp','lex.py',404),
  ('factorp -> APAR exp factorpp CPAR','factorp',4,'p_factorp','lex.py',405),
  ('factorp -> ACOR exp CCOR','factorp',3,'p_factorp','lex.py',406),
  ('factorp -> empty','factorp',1,'p_factorp','lex.py',407),
  ('factorpp -> COMA exp factorpp','factorpp',3,'p_factorpp','lex.py',414),
  ('factorpp -> empty','factorpp',1,'p_factorpp','lex.py',415),
  ('expbool -> exp expboolp exp expboolpp','expbool',4,'p_expbool','lex.py',422),
  ('expboolp -> MAYQ','expboolp',1,'p_expboolp','lex.py',426),
  ('expboolp -> MENQ','expboolp',1,'p_expboolp','lex.py',427),
  ('expboolp -> MAYI','expboolp',1,'p_expboolp','lex.py',428),
  ('expboolp -> MENI','expboolp',1,'p_expboolp','lex.py',429),
  ('expboolp -> IGUALIGUAL','expboolp',1,'p_expboolp','lex.py',430),
  ('expboolp -> DIF','expboolp',1,'p_expboolp','lex.py',431),
  ('expboolpp -> AND expbool','expboolpp',2,'p_expboolpp','lex.py',436),
  ('expboolpp -> OR expbool','expboolpp',2,'p_expboolpp','lex.py',437),
  ('expboolpp -> NOT expbool','expboolpp',2,'p_expboolpp','lex.py',438),
  ('expboolpp -> empty','expboolpp',1,'p_expboolpp','lex.py',439),
  ('ctes -> ID factorp','ctes',2,'p_ctes','lex.py',445),
  ('ctes -> CTEI','ctes',1,'p_ctes','lex.py',446),
  ('ctes -> CTEF','ctes',1,'p_ctes','lex.py',447),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',457),
]
