
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACOR ALLA AND APAR BOOL CCOR CHAR CLLA COMA CPAR CTEC CTEF CTEI DIF DIV DO DOSPNTS ELSE FALSE FLOAT FOR FUNCTION ID IF IGUAL IGUALIGUAL INT MAIN MAS MAYI MAYQ MENI MENOS MENQ NOT OR POR PROGRAM PTCOMA READ RETURN STR STRING THEN TO TRUE VARS VOID WHILE WRITEprogram : PROGRAM agregarTablaFunciones varss funcs MAIN APAR CPAR ALLA poptomain estatutos CLLAagregarTablaFunciones : ID PTCOMApoptomain : varss : VARS vars\n             | empty\n    vars : tipo DOSPNTS insertVar varsppp varspp vars\n            | empty\n    insertVar : IDvarsppp : initDim CTEI setDim\n               | empty\n    setDim : CCORinitDim : ACORvarspp : PTCOMA\n              | COMA insertVar varsppp varspp\n    funcs : FUNCTION funcsp insertFunc funcspp\n             | empty\n    insertFunc : IDfuncspp : APAR params CPAR updateParamTable PTCOMA varss ALLA addinit estatutos CLLA addsize endfunction funcsupdateParamTable : endfunction : addsize : addinit : funcsp : VOID\n              | tipo\n    estatutos : asig estatutop\n                 | return estatutop\n                 | lectura estatutop\n                 | escritura estatutop\n                 | cond estatutop\n                 | while estatutop\n                 | for estatutop\n                 | exp estatutop\n    estatutop : estatutos\n                 | empty\n    tipo : INT\n            | FLOAT\n            | CHAR\n    params : tipo DOSPNTS insertParams ididx paramsp\n              | empty\n    insertParams : ID\n    paramsp : COMA params\n               | empty\n    asig : varAs ididx igualAs asigpp PTCOMAvarAs : IDigualAs : IGUALasigp : exp asigppp\n             | empty\n    asigppp : COMA asigp\n               | empty\n    asigpp : expididx : corArr exp ver CCOR\n             | empty\n    corArr : ACORver : return : RETURN APAR exp CPAR PTCOMAlectura : READ APAR readId ididx lecturapp CPAR PTCOMAreadId : ID\n    lecturapp : COMA readId ididx lecturapp\n                 | empty\n    escritura : WRITE APAR escriturap escriturapp CPAR PTCOMAescriturap : pushEsc\n                  | exp\n    pushEsc : STRING\n               | CTEC\n    escriturapp : COMA escriturap escriturapp\n                   | empty\n    cond : IF APAR exp checkCond THEN ALLA estatutos CLLA condppcondpp : checkElse ALLA estatutos CLLA\n              | empty\n    checkElse : ELSE\n    checkCond : CPAR\n    while : saveWhile APAR exp checkWhileCond DO ALLA estatutos CLLAsaveWhile : WHILE\n    checkWhileCond : CPAR\n    for : FOR varFor ididx IGUAL exp initFor exp beforeDo ALLA estatutos CLLAvarFor : ID\n    initFor : TO\n    beforeDo : DO\n    exp : texp exppexpp : OR exp\n            | empty\n    texp : gexp texpptexpp : andCheck texp\n             | empty\n     andCheck : AND\n    gexp : mexp gexppgexpp : addPO mexp\n             | empty\n    addPO : MAYQ\n             | MENQ\n             | MAYI\n             | MENI\n             | IGUALIGUAL\n             | DIF\n             | NOT\n    mexp : termino mexppmexpp : operSR mexp\n            | empty\n    operSR : MENOS\n              | MAS\n    termino : factor terminopterminop : oper termino\n                | empty\n    oper : DIV\n            | POR\n    meteFondo : APARsacaFondo : CPARfactor : meteFondo exp sacaFondo\n              | ctes\n    factorp : APAR createEra factorParams cparParams\n               | ididx\n    factorParams : exp valParams factorpp\n                    | empty\n    cparParams : CPARcreateEra : valParams : factorpp : COMA exp valParams factorpp\n                | empty\n    ctes : CTEC\n            | CTEI\n            | CTEF\n            | ID validateExistance factorp\n    validateExistance : empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,83,],[0,-1,]),'ID':([2,15,16,17,19,20,21,22,35,41,43,45,50,52,53,54,55,56,57,58,59,66,67,68,70,71,72,73,74,75,76,77,78,95,96,97,98,99,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,138,139,152,153,154,155,156,157,158,159,160,161,172,178,179,180,182,183,184,186,196,199,201,202,203,204,205,206,209,215,219,220,225,227,229,232,237,238,],[4,-35,-36,-37,25,-23,-24,27,-3,27,68,81,-106,68,68,68,68,68,68,68,68,104,-124,-123,-124,-124,-124,-124,134,-109,-119,-120,-121,134,-52,-53,134,143,134,134,134,-79,134,-81,-124,-82,134,-84,-85,-86,134,-88,-89,-90,-91,-92,-93,-94,-95,-96,134,-98,-99,-100,-101,134,-103,-104,-105,-123,134,-45,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,134,134,134,-22,-43,-51,-55,143,68,-60,68,68,134,-77,-110,-114,-56,134,-124,-72,-67,-69,68,68,-75,-68,]),'VARS':([3,8,135,],[6,-2,6,]),'FUNCTION':([3,5,6,7,8,12,14,39,40,46,137,217,224,231,],[-124,10,-124,-5,-2,-4,-7,-124,-13,-6,-14,-21,-20,10,]),'MAIN':([3,5,6,7,8,9,11,12,14,29,39,40,46,137,217,224,231,235,],[-124,-124,-124,-5,-2,18,-16,-4,-7,-15,-124,-13,-6,-14,-21,-20,-124,-18,]),'PTCOMA':([4,26,27,31,33,44,47,48,49,67,70,71,72,73,75,76,77,78,79,82,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,166,167,169,183,188,197,205,206,],[8,-124,-8,40,-10,-19,-124,-9,-11,-124,-124,-124,-124,-124,-109,-119,-120,-121,135,40,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,182,-50,184,-51,199,209,-110,-114,]),'INT':([6,10,30,39,40,137,164,],[15,15,15,15,-13,-14,15,]),'FLOAT':([6,10,30,39,40,137,164,],[16,16,16,16,-13,-14,16,]),'CHAR':([6,10,30,39,40,137,164,],[17,17,17,17,-13,-14,17,]),'ALLA':([6,7,12,14,28,39,40,46,135,137,162,190,191,221,222,226,228,],[-124,-5,-4,-7,35,-124,-13,-6,-124,-14,180,201,202,229,-78,232,-70,]),'VOID':([10,],[20,]),'DOSPNTS':([13,15,16,17,37,],[22,-35,-36,-37,45,]),'APAR':([18,24,25,35,43,50,52,53,54,55,56,57,58,59,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,95,96,97,98,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,138,139,152,153,154,155,156,157,158,159,160,161,172,178,179,180,182,183,184,196,199,201,202,203,204,205,206,209,215,219,220,225,227,229,232,237,238,],[23,30,-17,-3,50,-106,50,50,50,50,50,50,50,50,98,99,100,101,102,-124,-123,-73,-124,-124,-124,-124,50,-109,-119,-120,-121,50,-52,-53,50,50,50,50,-79,50,-81,154,-82,50,-84,-85,-86,50,-88,-89,-90,-91,-92,-93,-94,-95,-96,50,-98,-99,-100,-101,50,-103,-104,-105,-123,50,-45,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,50,50,50,-22,-43,-51,-55,50,-60,50,50,50,-77,-110,-114,-56,50,-124,-72,-67,-69,50,50,-75,-68,]),'CPAR':([23,30,36,38,67,70,71,72,73,75,76,77,78,80,81,96,105,107,108,109,111,113,115,123,125,128,130,133,134,136,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,163,164,165,170,171,173,179,181,183,185,187,189,193,194,195,198,200,205,206,207,210,214,216,218,223,230,234,],[28,-124,44,-39,-124,-124,-124,-124,-124,-109,-119,-120,-121,-124,-40,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,161,-123,-124,169,-124,-57,-124,-61,-62,-63,-64,175,177,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,-38,-124,-42,-124,188,-66,-124,-41,-51,197,-59,-124,206,-116,-113,-124,-65,-110,-114,-124,-124,-112,-118,-58,-116,-124,-117,]),'ACOR':([26,27,47,60,68,80,81,103,104,108,134,142,143,198,],[34,-8,34,97,-44,97,-40,97,-76,97,-123,97,-57,97,]),'COMA':([26,27,31,33,47,48,49,67,70,71,72,73,75,76,77,78,80,81,82,96,105,107,108,109,111,113,115,123,125,128,130,134,136,142,143,144,145,146,147,148,152,153,155,156,157,158,159,160,161,170,183,189,194,198,205,206,207,210,223,230,],[-124,-8,41,-10,-124,-9,-11,-124,-124,-124,-124,-124,-109,-119,-120,-121,-124,-40,41,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,164,-124,-57,172,-61,-62,-63,-64,-80,-122,-111,-83,-87,-97,-102,-108,-107,186,-51,172,-116,-124,-110,-114,215,186,-116,215,]),'CTEI':([32,34,35,43,50,52,53,54,55,56,57,58,59,67,68,70,71,72,73,74,75,76,77,78,95,96,97,98,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,138,139,152,153,154,155,156,157,158,159,160,161,172,178,179,180,182,183,184,196,199,201,202,203,204,205,206,209,215,219,220,225,227,229,232,237,238,],[42,-12,-3,77,-106,77,77,77,77,77,77,77,77,-124,-123,-124,-124,-124,-124,77,-109,-119,-120,-121,77,-52,-53,77,77,77,77,-79,77,-81,-124,-82,77,-84,-85,-86,77,-88,-89,-90,-91,-92,-93,-94,-95,-96,77,-98,-99,-100,-101,77,-103,-104,-105,-123,77,-45,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,77,77,77,-22,-43,-51,-55,77,-60,77,77,77,-77,-110,-114,-56,77,-124,-72,-67,-69,77,77,-75,-68,]),'RETURN':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,61,61,61,61,61,61,61,61,61,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,61,-60,61,61,-110,-114,-56,-124,-72,-67,-69,61,61,-75,-68,]),'READ':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,62,62,62,62,62,62,62,62,62,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,62,-60,62,62,-110,-114,-56,-124,-72,-67,-69,62,62,-75,-68,]),'WRITE':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,63,63,63,63,63,63,63,63,63,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,63,-60,63,63,-110,-114,-56,-124,-72,-67,-69,63,63,-75,-68,]),'IF':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,64,64,64,64,64,64,64,64,64,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,64,-60,64,64,-110,-114,-56,-124,-72,-67,-69,64,64,-75,-68,]),'FOR':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,66,66,66,66,66,66,66,66,66,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,66,-60,66,66,-110,-114,-56,-124,-72,-67,-69,66,66,-75,-68,]),'WHILE':([35,43,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,180,182,183,184,196,199,201,202,205,206,209,219,220,225,227,229,232,237,238,],[-3,69,69,69,69,69,69,69,69,69,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-22,-43,-51,-55,69,-60,69,69,-110,-114,-56,-124,-72,-67,-69,69,69,-75,-68,]),'CTEC':([35,43,50,52,53,54,55,56,57,58,59,67,68,70,71,72,73,74,75,76,77,78,95,96,97,98,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,138,139,152,153,154,155,156,157,158,159,160,161,172,178,179,180,182,183,184,196,199,201,202,203,204,205,206,209,215,219,220,225,227,229,232,237,238,],[-3,76,-106,76,76,76,76,76,76,76,76,-124,-123,-124,-124,-124,-124,76,-109,-119,-120,-121,76,-52,-53,76,148,76,76,-79,76,-81,-124,-82,76,-84,-85,-86,76,-88,-89,-90,-91,-92,-93,-94,-95,-96,76,-98,-99,-100,-101,76,-103,-104,-105,-123,76,-45,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,148,76,76,-22,-43,-51,-55,76,-60,76,76,76,-77,-110,-114,-56,76,-124,-72,-67,-69,76,76,-75,-68,]),'CTEF':([35,43,50,52,53,54,55,56,57,58,59,67,68,70,71,72,73,74,75,76,77,78,95,96,97,98,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,138,139,152,153,154,155,156,157,158,159,160,161,172,178,179,180,182,183,184,196,199,201,202,203,204,205,206,209,215,219,220,225,227,229,232,237,238,],[-3,78,-106,78,78,78,78,78,78,78,78,-124,-123,-124,-124,-124,-124,78,-109,-119,-120,-121,78,-52,-53,78,78,78,78,-79,78,-81,-124,-82,78,-84,-85,-86,78,-88,-89,-90,-91,-92,-93,-94,-95,-96,78,-98,-99,-100,-101,78,-103,-104,-105,-123,78,-45,-80,-122,-115,-111,-83,-87,-97,-102,-108,-107,78,78,78,-22,-43,-51,-55,78,-60,78,78,78,-77,-110,-114,-56,78,-124,-72,-67,-69,78,78,-75,-68,]),'CCOR':([42,67,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,140,152,153,155,156,157,158,159,160,161,168,183,205,206,],[49,-124,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-54,-80,-122,-111,-83,-87,-97,-102,-108,-107,183,-51,-110,-114,]),'CLLA':([51,52,53,54,55,56,57,58,59,67,68,70,71,72,73,75,76,77,78,84,85,86,87,88,89,90,91,92,93,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,182,183,184,199,205,206,208,209,211,212,219,220,225,227,233,236,237,238,],[83,-124,-124,-124,-124,-124,-124,-124,-124,-124,-123,-124,-124,-124,-124,-109,-119,-120,-121,-25,-33,-34,-26,-27,-28,-29,-30,-31,-32,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-43,-51,-55,-60,-110,-114,217,-56,219,220,-124,-72,-67,-69,237,238,-75,-68,]),'IGUAL':([60,68,94,96,103,104,151,183,],[-124,-44,139,-52,-124,-76,178,-51,]),'OR':([67,68,70,71,72,73,75,76,77,78,96,108,109,111,113,115,123,125,128,130,134,148,153,155,156,157,158,159,160,161,183,205,206,],[106,-123,-124,-124,-124,-124,-109,-119,-120,-121,-52,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-119,-122,-111,-83,-87,-97,-102,-108,-107,-51,-110,-114,]),'TO':([67,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,183,192,205,206,],[-124,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,-51,204,-110,-114,]),'DO':([67,70,71,72,73,75,76,77,78,96,105,107,108,109,111,113,115,123,125,128,130,134,152,153,155,156,157,158,159,160,161,176,177,183,205,206,213,],[-124,-124,-124,-124,-124,-109,-119,-120,-121,-52,-79,-81,-124,-82,-84,-86,-88,-96,-98,-101,-103,-123,-80,-122,-111,-83,-87,-97,-102,-108,-107,191,-74,-51,-110,-114,222,]),'DIV':([68,73,75,76,77,78,96,108,134,148,153,155,160,161,183,205,206,],[-123,131,-109,-119,-120,-121,-52,-124,-123,-119,-122,-111,-108,-107,-51,-110,-114,]),'POR':([68,73,75,76,77,78,96,108,134,148,153,155,160,161,183,205,206,],[-123,132,-109,-119,-120,-121,-52,-124,-123,-119,-122,-111,-108,-107,-51,-110,-114,]),'MENOS':([68,72,73,75,76,77,78,96,108,128,130,134,148,153,155,159,160,161,183,205,206,],[-123,126,-124,-109,-119,-120,-121,-52,-124,-101,-103,-123,-119,-122,-111,-102,-108,-107,-51,-110,-114,]),'MAS':([68,72,73,75,76,77,78,96,108,128,130,134,148,153,155,159,160,161,183,205,206,],[-123,127,-124,-109,-119,-120,-121,-52,-124,-101,-103,-123,-119,-122,-111,-102,-108,-107,-51,-110,-114,]),'MAYQ':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,116,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'MENQ':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,117,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'MAYI':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,118,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'MENI':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,119,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'IGUALIGUAL':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,120,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'DIF':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,121,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'NOT':([68,71,72,73,75,76,77,78,96,108,123,125,128,130,134,148,153,155,158,159,160,161,183,205,206,],[-123,122,-124,-124,-109,-119,-120,-121,-52,-124,-96,-98,-101,-103,-123,-119,-122,-111,-97,-102,-108,-107,-51,-110,-114,]),'AND':([68,70,71,72,73,75,76,77,78,96,108,113,115,123,125,128,130,134,148,153,155,157,158,159,160,161,183,205,206,],[-123,112,-124,-124,-124,-109,-119,-120,-121,-52,-124,-86,-88,-96,-98,-101,-103,-123,-119,-122,-111,-87,-97,-102,-108,-107,-51,-110,-114,]),'STRING':([100,172,],[147,147,]),'THEN':([174,175,],[190,-71,]),'ELSE':([219,],[228,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'agregarTablaFunciones':([2,],[3,]),'varss':([3,135,],[5,162,]),'empty':([3,5,6,26,30,39,47,52,53,54,55,56,57,58,59,60,67,70,71,72,73,80,103,108,135,136,142,144,164,170,179,189,198,207,210,219,230,231,],[7,11,14,33,38,14,33,86,86,86,86,86,86,86,86,96,107,111,115,125,130,96,96,96,7,165,96,173,38,187,195,173,96,216,187,227,216,11,]),'funcs':([5,231,],[9,235,]),'vars':([6,39,],[12,46,]),'tipo':([6,10,30,39,164,],[13,21,37,13,37,]),'funcsp':([10,],[19,]),'insertFunc':([19,],[24,]),'insertVar':([22,41,],[26,47,]),'funcspp':([24,],[29,]),'varsppp':([26,47,],[31,82,]),'initDim':([26,47,],[32,32,]),'params':([30,164,],[36,181,]),'varspp':([31,82,],[39,137,]),'poptomain':([35,],[43,]),'setDim':([42,],[48,]),'estatutos':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[51,85,85,85,85,85,85,85,85,208,211,212,233,236,]),'asig':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'return':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'lectura':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'escritura':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'cond':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'while':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'for':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'exp':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,138,172,178,179,196,201,202,203,215,229,232,],[59,59,59,59,59,59,59,59,59,133,140,141,146,149,150,152,167,146,192,194,59,59,59,213,223,59,59,]),'varAs':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'saveWhile':([43,52,53,54,55,56,57,58,59,196,201,202,229,232,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'texp':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,138,172,178,179,196,201,202,203,215,229,232,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,156,67,67,67,67,67,67,67,67,67,67,67,]),'gexp':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,138,172,178,179,196,201,202,203,215,229,232,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'mexp':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,114,124,138,172,178,179,196,201,202,203,215,229,232,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,157,158,71,71,71,71,71,71,71,71,71,71,71,]),'termino':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,114,124,129,138,172,178,179,196,201,202,203,215,229,232,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,159,72,72,72,72,72,72,72,72,72,72,72,]),'factor':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,114,124,129,138,172,178,179,196,201,202,203,215,229,232,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'meteFondo':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,114,124,129,138,172,178,179,196,201,202,203,215,229,232,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'ctes':([43,52,53,54,55,56,57,58,59,74,95,98,100,101,102,106,110,114,124,129,138,172,178,179,196,201,202,203,215,229,232,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'updateParamTable':([44,],[79,]),'insertParams':([45,],[80,]),'estatutop':([52,53,54,55,56,57,58,59,],[84,87,88,89,90,91,92,93,]),'ididx':([60,80,103,108,142,198,],[94,136,151,155,170,210,]),'corArr':([60,80,103,108,142,198,],[95,95,95,95,95,95,]),'varFor':([66,],[103,]),'expp':([67,],[105,]),'validateExistance':([68,134,],[108,108,]),'texpp':([70,],[109,]),'andCheck':([70,],[110,]),'gexpp':([71,],[113,]),'addPO':([71,],[114,]),'mexpp':([72,],[123,]),'operSR':([72,],[124,]),'terminop':([73,],[128,]),'oper':([73,],[129,]),'igualAs':([94,],[138,]),'readId':([99,186,],[142,198,]),'escriturap':([100,172,],[144,189,]),'pushEsc':([100,172,],[145,145,]),'factorp':([108,],[153,]),'sacaFondo':([133,],[160,]),'paramsp':([136,],[163,]),'asigpp':([138,],[166,]),'ver':([140,],[168,]),'escriturapp':([144,189,],[171,200,]),'checkCond':([149,],[174,]),'checkWhileCond':([150,],[176,]),'createEra':([154,],[179,]),'lecturapp':([170,210,],[185,218,]),'factorParams':([179,],[193,]),'addinit':([180,],[196,]),'initFor':([192,],[203,]),'cparParams':([193,],[205,]),'valParams':([194,223,],[207,230,]),'factorpp':([207,230,],[214,234,]),'beforeDo':([213,],[221,]),'addsize':([217,],[224,]),'condpp':([219,],[225,]),'checkElse':([219,],[226,]),'endfunction':([224,],[231,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM agregarTablaFunciones varss funcs MAIN APAR CPAR ALLA poptomain estatutos CLLA','program',11,'p_program','lex.py',736),
  ('agregarTablaFunciones -> ID PTCOMA','agregarTablaFunciones',2,'p_agregarTablaFunciones','lex.py',761),
  ('poptomain -> <empty>','poptomain',0,'p_poptomain','lex.py',779),
  ('varss -> VARS vars','varss',2,'p_varss','lex.py',793),
  ('varss -> empty','varss',1,'p_varss','lex.py',794),
  ('vars -> tipo DOSPNTS insertVar varsppp varspp vars','vars',6,'p_vars','lex.py',799),
  ('vars -> empty','vars',1,'p_vars','lex.py',800),
  ('insertVar -> ID','insertVar',1,'p_insertVar','lex.py',804),
  ('varsppp -> initDim CTEI setDim','varsppp',3,'p_varsppp','lex.py',814),
  ('varsppp -> empty','varsppp',1,'p_varsppp','lex.py',815),
  ('setDim -> CCOR','setDim',1,'p_setDim','lex.py',819),
  ('initDim -> ACOR','initDim',1,'p_initDim','lex.py',835),
  ('varspp -> PTCOMA','varspp',1,'p_varspp','lex.py',851),
  ('varspp -> COMA insertVar varsppp varspp','varspp',4,'p_varspp','lex.py',852),
  ('funcs -> FUNCTION funcsp insertFunc funcspp','funcs',4,'p_funcs','lex.py',859),
  ('funcs -> empty','funcs',1,'p_funcs','lex.py',860),
  ('insertFunc -> ID','insertFunc',1,'p_insertFunc','lex.py',864),
  ('funcspp -> APAR params CPAR updateParamTable PTCOMA varss ALLA addinit estatutos CLLA addsize endfunction funcs','funcspp',13,'p_funcspp','lex.py',880),
  ('updateParamTable -> <empty>','updateParamTable',0,'p_updateParamTable','lex.py',886),
  ('endfunction -> <empty>','endfunction',0,'p_endfunciton','lex.py',893),
  ('addsize -> <empty>','addsize',0,'p_addsize','lex.py',907),
  ('addinit -> <empty>','addinit',0,'p_addinit','lex.py',932),
  ('funcsp -> VOID','funcsp',1,'p_funcsp','lex.py',945),
  ('funcsp -> tipo','funcsp',1,'p_funcsp','lex.py',946),
  ('estatutos -> asig estatutop','estatutos',2,'p_estatutos','lex.py',959),
  ('estatutos -> return estatutop','estatutos',2,'p_estatutos','lex.py',960),
  ('estatutos -> lectura estatutop','estatutos',2,'p_estatutos','lex.py',961),
  ('estatutos -> escritura estatutop','estatutos',2,'p_estatutos','lex.py',962),
  ('estatutos -> cond estatutop','estatutos',2,'p_estatutos','lex.py',963),
  ('estatutos -> while estatutop','estatutos',2,'p_estatutos','lex.py',964),
  ('estatutos -> for estatutop','estatutos',2,'p_estatutos','lex.py',965),
  ('estatutos -> exp estatutop','estatutos',2,'p_estatutos','lex.py',966),
  ('estatutop -> estatutos','estatutop',1,'p_estatutop','lex.py',973),
  ('estatutop -> empty','estatutop',1,'p_estatutop','lex.py',974),
  ('tipo -> INT','tipo',1,'p_tipo','lex.py',981),
  ('tipo -> FLOAT','tipo',1,'p_tipo','lex.py',982),
  ('tipo -> CHAR','tipo',1,'p_tipo','lex.py',983),
  ('params -> tipo DOSPNTS insertParams ididx paramsp','params',5,'p_params','lex.py',994),
  ('params -> empty','params',1,'p_params','lex.py',995),
  ('insertParams -> ID','insertParams',1,'p_insertParams','lex.py',999),
  ('paramsp -> COMA params','paramsp',2,'p_paramsp','lex.py',1016),
  ('paramsp -> empty','paramsp',1,'p_paramsp','lex.py',1017),
  ('asig -> varAs ididx igualAs asigpp PTCOMA','asig',5,'p_asig','lex.py',1024),
  ('varAs -> ID','varAs',1,'p_varAs','lex.py',1039),
  ('igualAs -> IGUAL','igualAs',1,'p_igualAs','lex.py',1048),
  ('asigp -> exp asigppp','asigp',2,'p_asigp','lex.py',1064),
  ('asigp -> empty','asigp',1,'p_asigp','lex.py',1065),
  ('asigppp -> COMA asigp','asigppp',2,'p_asigppp','lex.py',1073),
  ('asigppp -> empty','asigppp',1,'p_asigppp','lex.py',1074),
  ('asigpp -> exp','asigpp',1,'p_asigpp','lex.py',1080),
  ('ididx -> corArr exp ver CCOR','ididx',4,'p_ididx','lex.py',1087),
  ('ididx -> empty','ididx',1,'p_ididx','lex.py',1088),
  ('corArr -> ACOR','corArr',1,'p_corArr','lex.py',1120),
  ('ver -> <empty>','ver',0,'p_ver','lex.py',1135),
  ('return -> RETURN APAR exp CPAR PTCOMA','return',5,'p_return','lex.py',1177),
  ('lectura -> READ APAR readId ididx lecturapp CPAR PTCOMA','lectura',7,'p_lectura','lex.py',1192),
  ('readId -> ID','readId',1,'p_readId','lex.py',1196),
  ('lecturapp -> COMA readId ididx lecturapp','lecturapp',4,'p_lecturapp','lex.py',1204),
  ('lecturapp -> empty','lecturapp',1,'p_lecturapp','lex.py',1205),
  ('escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA','escritura',6,'p_escritura','lex.py',1212),
  ('escriturap -> pushEsc','escriturap',1,'p_escriturap','lex.py',1217),
  ('escriturap -> exp','escriturap',1,'p_escriturap','lex.py',1218),
  ('pushEsc -> STRING','pushEsc',1,'p_pushEsc','lex.py',1229),
  ('pushEsc -> CTEC','pushEsc',1,'p_pushEsc','lex.py',1230),
  ('escriturapp -> COMA escriturap escriturapp','escriturapp',3,'p_escriturapp','lex.py',1238),
  ('escriturapp -> empty','escriturapp',1,'p_escriturapp','lex.py',1239),
  ('cond -> IF APAR exp checkCond THEN ALLA estatutos CLLA condpp','cond',9,'p_cond','lex.py',1245),
  ('condpp -> checkElse ALLA estatutos CLLA','condpp',4,'p_condpp','lex.py',1258),
  ('condpp -> empty','condpp',1,'p_condpp','lex.py',1259),
  ('checkElse -> ELSE','checkElse',1,'p_checkElse','lex.py',1265),
  ('checkCond -> CPAR','checkCond',1,'p_checkCond','lex.py',1281),
  ('while -> saveWhile APAR exp checkWhileCond DO ALLA estatutos CLLA','while',8,'p_while','lex.py',1299),
  ('saveWhile -> WHILE','saveWhile',1,'p_saveWhile','lex.py',1314),
  ('checkWhileCond -> CPAR','checkWhileCond',1,'p_checkWhileCond','lex.py',1321),
  ('for -> FOR varFor ididx IGUAL exp initFor exp beforeDo ALLA estatutos CLLA','for',11,'p_for','lex.py',1342),
  ('varFor -> ID','varFor',1,'p_varFor','lex.py',1369),
  ('initFor -> TO','initFor',1,'p_initFor','lex.py',1384),
  ('beforeDo -> DO','beforeDo',1,'p_beforeDo','lex.py',1400),
  ('exp -> texp expp','exp',2,'p_exp','lex.py',1426),
  ('expp -> OR exp','expp',2,'p_expp','lex.py',1430),
  ('expp -> empty','expp',1,'p_expp','lex.py',1431),
  ('texp -> gexp texpp','texp',2,'p_texp','lex.py',1435),
  ('texpp -> andCheck texp','texpp',2,'p_texpp','lex.py',1439),
  ('texpp -> empty','texpp',1,'p_texpp','lex.py',1440),
  ('andCheck -> AND','andCheck',1,'p_andCheck','lex.py',1443),
  ('gexp -> mexp gexpp','gexp',2,'p_gexp','lex.py',1449),
  ('gexpp -> addPO mexp','gexpp',2,'p_gexpp','lex.py',1472),
  ('gexpp -> empty','gexpp',1,'p_gexpp','lex.py',1473),
  ('addPO -> MAYQ','addPO',1,'p_addPO','lex.py',1476),
  ('addPO -> MENQ','addPO',1,'p_addPO','lex.py',1477),
  ('addPO -> MAYI','addPO',1,'p_addPO','lex.py',1478),
  ('addPO -> MENI','addPO',1,'p_addPO','lex.py',1479),
  ('addPO -> IGUALIGUAL','addPO',1,'p_addPO','lex.py',1480),
  ('addPO -> DIF','addPO',1,'p_addPO','lex.py',1481),
  ('addPO -> NOT','addPO',1,'p_addPO','lex.py',1482),
  ('mexp -> termino mexpp','mexp',2,'p_mexp','lex.py',1488),
  ('mexpp -> operSR mexp','mexpp',2,'p_mexpp','lex.py',1514),
  ('mexpp -> empty','mexpp',1,'p_mexpp','lex.py',1515),
  ('operSR -> MENOS','operSR',1,'p_operSR','lex.py',1520),
  ('operSR -> MAS','operSR',1,'p_operSR','lex.py',1521),
  ('termino -> factor terminop','termino',2,'p_termino','lex.py',1529),
  ('terminop -> oper termino','terminop',2,'p_terminop','lex.py',1554),
  ('terminop -> empty','terminop',1,'p_terminop','lex.py',1555),
  ('oper -> DIV','oper',1,'p_oper','lex.py',1560),
  ('oper -> POR','oper',1,'p_oper','lex.py',1561),
  ('meteFondo -> APAR','meteFondo',1,'p_meteFondo','lex.py',1569),
  ('sacaFondo -> CPAR','sacaFondo',1,'p_sacaFondo','lex.py',1575),
  ('factor -> meteFondo exp sacaFondo','factor',3,'p_factor','lex.py',1581),
  ('factor -> ctes','factor',1,'p_factor','lex.py',1582),
  ('factorp -> APAR createEra factorParams cparParams','factorp',4,'p_factorp','lex.py',1622),
  ('factorp -> ididx','factorp',1,'p_factorp','lex.py',1623),
  ('factorParams -> exp valParams factorpp','factorParams',3,'p_factorParams','lex.py',1627),
  ('factorParams -> empty','factorParams',1,'p_factorParams','lex.py',1628),
  ('cparParams -> CPAR','cparParams',1,'p_cparParams','lex.py',1632),
  ('createEra -> <empty>','createEra',0,'p_createEra','lex.py',1654),
  ('valParams -> <empty>','valParams',0,'p_valParams','lex.py',1669),
  ('factorpp -> COMA exp valParams factorpp','factorpp',4,'p_factorpp','lex.py',1703),
  ('factorpp -> empty','factorpp',1,'p_factorpp','lex.py',1704),
  ('ctes -> CTEC','ctes',1,'p_ctes','lex.py',1713),
  ('ctes -> CTEI','ctes',1,'p_ctes','lex.py',1714),
  ('ctes -> CTEF','ctes',1,'p_ctes','lex.py',1715),
  ('ctes -> ID validateExistance factorp','ctes',3,'p_ctes','lex.py',1716),
  ('validateExistance -> <empty>','validateExistance',0,'p_validateExistance','lex.py',1725),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',1737),
]
