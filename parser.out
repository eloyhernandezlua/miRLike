Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA
Rule 2     varss -> VARS vars
Rule 3     varss -> empty
Rule 4     vars -> tipo DOSPNTS varsp varspp vars
Rule 5     vars -> empty
Rule 6     varsp -> ID varsppp
Rule 7     varsppp -> ACOR CTEI CCOR
Rule 8     varsppp -> empty
Rule 9     varspp -> PTCOMA
Rule 10    varspp -> COMA varsp varspp
Rule 11    funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs
Rule 12    funcs -> empty
Rule 13    funcsp -> VOID
Rule 14    funcsp -> tipo
Rule 15    estatutos -> asig estatutop
Rule 16    estatutos -> llamada estatutop
Rule 17    estatutos -> return estatutop
Rule 18    estatutos -> lectura estatutop
Rule 19    estatutos -> escritura estatutop
Rule 20    estatutos -> cond estatutop
Rule 21    estatutos -> while estatutop
Rule 22    estatutos -> for estatutop
Rule 23    estatutos -> exp estatutop
Rule 24    estatutop -> estatutos
Rule 25    estatutop -> empty
Rule 26    tipo -> INT
Rule 27    tipo -> FLOAT
Rule 28    tipo -> CHAR
Rule 29    tipo -> STR
Rule 30    tipo -> BOOL
Rule 31    params -> tipo ID paramsp
Rule 32    params -> empty
Rule 33    paramsp -> COMA params
Rule 34    paramsp -> ACOR CCOR params
Rule 35    paramsp -> empty
Rule 36    asig -> ID ididx IGUAL asigpp PTCOMA
Rule 37    ididx -> ACOR exp CCOR
Rule 38    ididx -> empty
Rule 39    asigpp -> exp
Rule 40    asigpp -> expbool
Rule 41    llamada -> ID APAR args CPAR PTCOMA
Rule 42    args -> ctes argsp
Rule 43    args -> ID ididx argsp
Rule 44    args -> exp argsp
Rule 45    args -> expbool argsp
Rule 46    args -> STRING argsp
Rule 47    args -> CTEC argsp
Rule 48    argsp -> COMA
Rule 49    argsp -> empty
Rule 50    return -> RETURN APAR returnp CPAR PTCOMA
Rule 51    returnp -> exp
Rule 52    returnp -> expbool
Rule 53    lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA
Rule 54    lecturapp -> COMA
Rule 55    lecturapp -> empty
Rule 56    escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA
Rule 57    escriturap -> STRING
Rule 58    escriturap -> exp
Rule 59    escriturap -> expbool
Rule 60    escriturap -> CTEC
Rule 61    escriturapp -> COMA
Rule 62    escriturapp -> empty
Rule 63    cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
Rule 64    condp -> expbool
Rule 65    condp -> TRUE
Rule 66    condp -> FALSE
Rule 67    condpp -> ELSE ALLA estatutos CLLA
Rule 68    condpp -> empty
Rule 69    while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA
Rule 70    whilep -> expbool
Rule 71    whilep -> TRUE
Rule 72    whilep -> FALSE
Rule 73    for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
Rule 74    exp -> termino expp
Rule 75    expp -> MAS exp
Rule 76    expp -> MENOS exp
Rule 77    expp -> empty
Rule 78    termino -> factor terminop
Rule 79    terminop -> POR termino
Rule 80    terminop -> DIV termino
Rule 81    terminop -> empty
Rule 82    factor -> APAR exp CPAR
Rule 83    factor -> factorp ctes
Rule 84    factorp -> MAS
Rule 85    factorp -> MENOS
Rule 86    factorp -> empty
Rule 87    expbool -> exp expboolp exp
Rule 88    expboolp -> MAYQ
Rule 89    expboolp -> MENQ
Rule 90    expboolp -> MAYI
Rule 91    expboolp -> MENI
Rule 92    expboolp -> IGUALIGUAL
Rule 93    expboolp -> DIF
Rule 94    ctes -> ID
Rule 95    ctes -> CTEI
Rule 96    ctes -> CTEF
Rule 97    empty -> <empty>

Terminals, with rules where they appear

ACOR                 : 7 34 37
ALLA                 : 1 11 63 67 69 73
APAR                 : 1 11 41 50 53 56 63 69 82
BOOL                 : 30
CCOR                 : 7 34 37
CHAR                 : 28
CLLA                 : 1 11 63 67 69 73
COMA                 : 10 33 48 54 61
CPAR                 : 1 11 41 50 53 56 63 69 82
CTEC                 : 47 60
CTEF                 : 96
CTEI                 : 7 95
DIF                  : 93
DIV                  : 80
DO                   : 69 73
DOSPNTS              : 4
ELSE                 : 67
FALSE                : 66 72
FLOAT                : 27
FOR                  : 73
FUNCTION             : 11
ID                   : 1 6 11 31 36 41 43 53 73 94
IF                   : 63
IGUAL                : 36 73
IGUALIGUAL           : 92
INT                  : 26
MAIN                 : 1
MAS                  : 75 84
MAYI                 : 90
MAYQ                 : 88
MENI                 : 91
MENOS                : 76 85
MENQ                 : 89
POR                  : 79
PROGRAM              : 1
PTCOMA               : 1 9 11 36 41 50 53 56
READ                 : 53
RETURN               : 50
STR                  : 29
STRING               : 46 57
THEN                 : 63
TO                   : 73
TRUE                 : 65 71
VARS                 : 2
VOID                 : 13
WHILE                : 69
WRITE                : 56
error                : 

Nonterminals, with rules where they appear

args                 : 41
argsp                : 42 43 44 45 46 47
asig                 : 15
asigpp               : 36
cond                 : 20
condp                : 63
condpp               : 63
ctes                 : 42 83
empty                : 3 5 8 12 25 32 35 38 49 55 62 68 77 81 86
escritura            : 19
escriturap           : 56
escriturapp          : 56
estatutop            : 15 16 17 18 19 20 21 22 23
estatutos            : 1 11 24 63 67 69 73
exp                  : 23 37 39 44 51 58 73 73 75 76 82 87 87
expbool              : 40 45 52 59 64 70
expboolp             : 87
expp                 : 74
factor               : 78
factorp              : 83
for                  : 22
funcs                : 1 11
funcsp               : 11
ididx                : 36 43 53 73
lectura              : 18
lecturapp            : 53
llamada              : 16
params               : 11 33 34
paramsp              : 31
program              : 0
return               : 17
returnp              : 50
termino              : 74 79 80
terminop             : 78
tipo                 : 4 14 31
vars                 : 2 4
varsp                : 4 10
varspp               : 4 10
varsppp              : 6
varss                : 1 11
while                : 21
whilep               : 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA

    PTCOMA          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PTCOMA . varss funcs MAIN APAR CPAR ALLA estatutos CLLA
    (2) varss -> . VARS vars
    (3) varss -> . empty
    (97) empty -> .

    VARS            shift and go to state 6
    FUNCTION        reduce using rule 97 (empty -> .)
    MAIN            reduce using rule 97 (empty -> .)

    varss                          shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID PTCOMA varss . funcs MAIN APAR CPAR ALLA estatutos CLLA
    (11) funcs -> . FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs
    (12) funcs -> . empty
    (97) empty -> .

    FUNCTION        shift and go to state 9
    MAIN            reduce using rule 97 (empty -> .)

    funcs                          shift and go to state 8
    empty                          shift and go to state 10

state 6

    (2) varss -> VARS . vars
    (4) vars -> . tipo DOSPNTS varsp varspp vars
    (5) vars -> . empty
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL
    (97) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18
    FUNCTION        reduce using rule 97 (empty -> .)
    MAIN            reduce using rule 97 (empty -> .)
    ALLA            reduce using rule 97 (empty -> .)

    vars                           shift and go to state 11
    tipo                           shift and go to state 12
    empty                          shift and go to state 13

state 7

    (3) varss -> empty .

    FUNCTION        reduce using rule 3 (varss -> empty .)
    MAIN            reduce using rule 3 (varss -> empty .)
    ALLA            reduce using rule 3 (varss -> empty .)


state 8

    (1) program -> PROGRAM ID PTCOMA varss funcs . MAIN APAR CPAR ALLA estatutos CLLA

    MAIN            shift and go to state 19


state 9

    (11) funcs -> FUNCTION . funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs
    (13) funcsp -> . VOID
    (14) funcsp -> . tipo
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL

    VOID            shift and go to state 21
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18

    funcsp                         shift and go to state 20
    tipo                           shift and go to state 22

state 10

    (12) funcs -> empty .

    MAIN            reduce using rule 12 (funcs -> empty .)


state 11

    (2) varss -> VARS vars .

    FUNCTION        reduce using rule 2 (varss -> VARS vars .)
    MAIN            reduce using rule 2 (varss -> VARS vars .)
    ALLA            reduce using rule 2 (varss -> VARS vars .)


state 12

    (4) vars -> tipo . DOSPNTS varsp varspp vars

    DOSPNTS         shift and go to state 23


state 13

    (5) vars -> empty .

    FUNCTION        reduce using rule 5 (vars -> empty .)
    MAIN            reduce using rule 5 (vars -> empty .)
    ALLA            reduce using rule 5 (vars -> empty .)


state 14

    (26) tipo -> INT .

    DOSPNTS         reduce using rule 26 (tipo -> INT .)
    ID              reduce using rule 26 (tipo -> INT .)


state 15

    (27) tipo -> FLOAT .

    DOSPNTS         reduce using rule 27 (tipo -> FLOAT .)
    ID              reduce using rule 27 (tipo -> FLOAT .)


state 16

    (28) tipo -> CHAR .

    DOSPNTS         reduce using rule 28 (tipo -> CHAR .)
    ID              reduce using rule 28 (tipo -> CHAR .)


state 17

    (29) tipo -> STR .

    DOSPNTS         reduce using rule 29 (tipo -> STR .)
    ID              reduce using rule 29 (tipo -> STR .)


state 18

    (30) tipo -> BOOL .

    DOSPNTS         reduce using rule 30 (tipo -> BOOL .)
    ID              reduce using rule 30 (tipo -> BOOL .)


state 19

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN . APAR CPAR ALLA estatutos CLLA

    APAR            shift and go to state 24


state 20

    (11) funcs -> FUNCTION funcsp . ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs

    ID              shift and go to state 25


state 21

    (13) funcsp -> VOID .

    ID              reduce using rule 13 (funcsp -> VOID .)


state 22

    (14) funcsp -> tipo .

    ID              reduce using rule 14 (funcsp -> tipo .)


state 23

    (4) vars -> tipo DOSPNTS . varsp varspp vars
    (6) varsp -> . ID varsppp

    ID              shift and go to state 27

    varsp                          shift and go to state 26

state 24

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN APAR . CPAR ALLA estatutos CLLA

    CPAR            shift and go to state 28


state 25

    (11) funcs -> FUNCTION funcsp ID . APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs

    APAR            shift and go to state 29


state 26

    (4) vars -> tipo DOSPNTS varsp . varspp vars
    (9) varspp -> . PTCOMA
    (10) varspp -> . COMA varsp varspp

    PTCOMA          shift and go to state 31
    COMA            shift and go to state 32

    varspp                         shift and go to state 30

state 27

    (6) varsp -> ID . varsppp
    (7) varsppp -> . ACOR CTEI CCOR
    (8) varsppp -> . empty
    (97) empty -> .

    ACOR            shift and go to state 34
    PTCOMA          reduce using rule 97 (empty -> .)
    COMA            reduce using rule 97 (empty -> .)

    varsppp                        shift and go to state 33
    empty                          shift and go to state 35

state 28

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR . ALLA estatutos CLLA

    ALLA            shift and go to state 36


state 29

    (11) funcs -> FUNCTION funcsp ID APAR . params CPAR PTCOMA varss ALLA estatutos CLLA funcs
    (31) params -> . tipo ID paramsp
    (32) params -> . empty
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL
    (97) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18
    CPAR            reduce using rule 97 (empty -> .)

    params                         shift and go to state 37
    tipo                           shift and go to state 38
    empty                          shift and go to state 39

state 30

    (4) vars -> tipo DOSPNTS varsp varspp . vars
    (4) vars -> . tipo DOSPNTS varsp varspp vars
    (5) vars -> . empty
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL
    (97) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18
    FUNCTION        reduce using rule 97 (empty -> .)
    MAIN            reduce using rule 97 (empty -> .)
    ALLA            reduce using rule 97 (empty -> .)

    tipo                           shift and go to state 12
    vars                           shift and go to state 40
    empty                          shift and go to state 13

state 31

    (9) varspp -> PTCOMA .

    INT             reduce using rule 9 (varspp -> PTCOMA .)
    FLOAT           reduce using rule 9 (varspp -> PTCOMA .)
    CHAR            reduce using rule 9 (varspp -> PTCOMA .)
    STR             reduce using rule 9 (varspp -> PTCOMA .)
    BOOL            reduce using rule 9 (varspp -> PTCOMA .)
    FUNCTION        reduce using rule 9 (varspp -> PTCOMA .)
    MAIN            reduce using rule 9 (varspp -> PTCOMA .)
    ALLA            reduce using rule 9 (varspp -> PTCOMA .)


state 32

    (10) varspp -> COMA . varsp varspp
    (6) varsp -> . ID varsppp

    ID              shift and go to state 27

    varsp                          shift and go to state 41

state 33

    (6) varsp -> ID varsppp .

    PTCOMA          reduce using rule 6 (varsp -> ID varsppp .)
    COMA            reduce using rule 6 (varsp -> ID varsppp .)


state 34

    (7) varsppp -> ACOR . CTEI CCOR

    CTEI            shift and go to state 42


state 35

    (8) varsppp -> empty .

    PTCOMA          reduce using rule 8 (varsppp -> empty .)
    COMA            reduce using rule 8 (varsppp -> empty .)


state 36

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA . estatutos CLLA
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    estatutos                      shift and go to state 45
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 37

    (11) funcs -> FUNCTION funcsp ID APAR params . CPAR PTCOMA varss ALLA estatutos CLLA funcs

    CPAR            shift and go to state 67


state 38

    (31) params -> tipo . ID paramsp

    ID              shift and go to state 68


state 39

    (32) params -> empty .

    CPAR            reduce using rule 32 (params -> empty .)


state 40

    (4) vars -> tipo DOSPNTS varsp varspp vars .

    FUNCTION        reduce using rule 4 (vars -> tipo DOSPNTS varsp varspp vars .)
    MAIN            reduce using rule 4 (vars -> tipo DOSPNTS varsp varspp vars .)
    ALLA            reduce using rule 4 (vars -> tipo DOSPNTS varsp varspp vars .)


state 41

    (10) varspp -> COMA varsp . varspp
    (9) varspp -> . PTCOMA
    (10) varspp -> . COMA varsp varspp

    PTCOMA          shift and go to state 31
    COMA            shift and go to state 32

    varspp                         shift and go to state 69

state 42

    (7) varsppp -> ACOR CTEI . CCOR

    CCOR            shift and go to state 70


state 43

    (36) asig -> ID . ididx IGUAL asigpp PTCOMA
    (41) llamada -> ID . APAR args CPAR PTCOMA
    (37) ididx -> . ACOR exp CCOR
    (38) ididx -> . empty
    (97) empty -> .

    APAR            shift and go to state 72
    ACOR            shift and go to state 73
    IGUAL           reduce using rule 97 (empty -> .)

    ididx                          shift and go to state 71
    empty                          shift and go to state 74

state 44

    (82) factor -> APAR . exp CPAR
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 75
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 45

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos . CLLA

    CLLA            shift and go to state 76


state 46

    (15) estatutos -> asig . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    asig                           shift and go to state 46
    estatutop                      shift and go to state 77
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 47

    (16) estatutos -> llamada . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    llamada                        shift and go to state 47
    estatutop                      shift and go to state 80
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 48

    (17) estatutos -> return . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    return                         shift and go to state 48
    estatutop                      shift and go to state 81
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 49

    (18) estatutos -> lectura . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    lectura                        shift and go to state 49
    estatutop                      shift and go to state 82
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 50

    (19) estatutos -> escritura . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    escritura                      shift and go to state 50
    estatutop                      shift and go to state 83
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 51

    (20) estatutos -> cond . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    cond                           shift and go to state 51
    estatutop                      shift and go to state 84
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 52

    (21) estatutos -> while . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    while                          shift and go to state 52
    estatutop                      shift and go to state 85
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 53

    (22) estatutos -> for . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    for                            shift and go to state 53
    estatutop                      shift and go to state 86
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 54

    (23) estatutos -> exp . estatutop
    (24) estatutop -> . estatutos
    (25) estatutop -> . empty
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (97) empty -> .
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty

  ! shift/reduce conflict for ID resolved as shift
    CLLA            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]

    exp                            shift and go to state 54
    estatutop                      shift and go to state 87
    estatutos                      shift and go to state 78
    empty                          shift and go to state 79
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63

state 55

    (50) return -> RETURN . APAR returnp CPAR PTCOMA

    APAR            shift and go to state 88


state 56

    (53) lectura -> READ . APAR ID ididx lecturapp CPAR PTCOMA

    APAR            shift and go to state 89


state 57

    (56) escritura -> WRITE . APAR escriturap escriturapp CPAR PTCOMA

    APAR            shift and go to state 90


state 58

    (63) cond -> IF . APAR condp CPAR THEN ALLA estatutos CLLA condpp

    APAR            shift and go to state 91


state 59

    (69) while -> WHILE . APAR whilep CPAR DO ALLA estatutos CLLA

    APAR            shift and go to state 92


state 60

    (73) for -> FOR . ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA

    ID              shift and go to state 93


state 61

    (74) exp -> termino . expp
    (75) expp -> . MAS exp
    (76) expp -> . MENOS exp
    (77) expp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAS             shift and go to state 95
    MENOS           shift and go to state 96
    ID              reduce using rule 97 (empty -> .)
    RETURN          reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    WRITE           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    APAR            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    CLLA            reduce using rule 97 (empty -> .)
    CPAR            reduce using rule 97 (empty -> .)
    COMA            reduce using rule 97 (empty -> .)
    MAYQ            reduce using rule 97 (empty -> .)
    MENQ            reduce using rule 97 (empty -> .)
    MAYI            reduce using rule 97 (empty -> .)
    MENI            reduce using rule 97 (empty -> .)
    IGUALIGUAL      reduce using rule 97 (empty -> .)
    DIF             reduce using rule 97 (empty -> .)
    CCOR            reduce using rule 97 (empty -> .)
    PTCOMA          reduce using rule 97 (empty -> .)
    TO              reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)

  ! MAS             [ reduce using rule 97 (empty -> .) ]
  ! MENOS           [ reduce using rule 97 (empty -> .) ]

    expp                           shift and go to state 94
    empty                          shift and go to state 97

state 62

    (78) termino -> factor . terminop
    (79) terminop -> . POR termino
    (80) terminop -> . DIV termino
    (81) terminop -> . empty
    (97) empty -> .

    POR             shift and go to state 99
    DIV             shift and go to state 100
    MAS             reduce using rule 97 (empty -> .)
    MENOS           reduce using rule 97 (empty -> .)
    ID              reduce using rule 97 (empty -> .)
    RETURN          reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    WRITE           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    APAR            reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    CLLA            reduce using rule 97 (empty -> .)
    CPAR            reduce using rule 97 (empty -> .)
    COMA            reduce using rule 97 (empty -> .)
    MAYQ            reduce using rule 97 (empty -> .)
    MENQ            reduce using rule 97 (empty -> .)
    MAYI            reduce using rule 97 (empty -> .)
    MENI            reduce using rule 97 (empty -> .)
    IGUALIGUAL      reduce using rule 97 (empty -> .)
    DIF             reduce using rule 97 (empty -> .)
    CCOR            reduce using rule 97 (empty -> .)
    PTCOMA          reduce using rule 97 (empty -> .)
    TO              reduce using rule 97 (empty -> .)
    DO              reduce using rule 97 (empty -> .)

    terminop                       shift and go to state 98
    empty                          shift and go to state 101

state 63

    (83) factor -> factorp . ctes
    (94) ctes -> . ID
    (95) ctes -> . CTEI
    (96) ctes -> . CTEF

    ID              shift and go to state 103
    CTEI            shift and go to state 104
    CTEF            shift and go to state 105

    ctes                           shift and go to state 102

state 64

    (84) factorp -> MAS .

    ID              reduce using rule 84 (factorp -> MAS .)
    CTEI            reduce using rule 84 (factorp -> MAS .)
    CTEF            reduce using rule 84 (factorp -> MAS .)


state 65

    (85) factorp -> MENOS .

    ID              reduce using rule 85 (factorp -> MENOS .)
    CTEI            reduce using rule 85 (factorp -> MENOS .)
    CTEF            reduce using rule 85 (factorp -> MENOS .)


state 66

    (86) factorp -> empty .

    ID              reduce using rule 86 (factorp -> empty .)
    CTEI            reduce using rule 86 (factorp -> empty .)
    CTEF            reduce using rule 86 (factorp -> empty .)


state 67

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR . PTCOMA varss ALLA estatutos CLLA funcs

    PTCOMA          shift and go to state 106


state 68

    (31) params -> tipo ID . paramsp
    (33) paramsp -> . COMA params
    (34) paramsp -> . ACOR CCOR params
    (35) paramsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 108
    ACOR            shift and go to state 109
    CPAR            reduce using rule 97 (empty -> .)

    paramsp                        shift and go to state 107
    empty                          shift and go to state 110

state 69

    (10) varspp -> COMA varsp varspp .

    INT             reduce using rule 10 (varspp -> COMA varsp varspp .)
    FLOAT           reduce using rule 10 (varspp -> COMA varsp varspp .)
    CHAR            reduce using rule 10 (varspp -> COMA varsp varspp .)
    STR             reduce using rule 10 (varspp -> COMA varsp varspp .)
    BOOL            reduce using rule 10 (varspp -> COMA varsp varspp .)
    FUNCTION        reduce using rule 10 (varspp -> COMA varsp varspp .)
    MAIN            reduce using rule 10 (varspp -> COMA varsp varspp .)
    ALLA            reduce using rule 10 (varspp -> COMA varsp varspp .)


state 70

    (7) varsppp -> ACOR CTEI CCOR .

    PTCOMA          reduce using rule 7 (varsppp -> ACOR CTEI CCOR .)
    COMA            reduce using rule 7 (varsppp -> ACOR CTEI CCOR .)


state 71

    (36) asig -> ID ididx . IGUAL asigpp PTCOMA

    IGUAL           shift and go to state 111


state 72

    (41) llamada -> ID APAR . args CPAR PTCOMA
    (42) args -> . ctes argsp
    (43) args -> . ID ididx argsp
    (44) args -> . exp argsp
    (45) args -> . expbool argsp
    (46) args -> . STRING argsp
    (47) args -> . CTEC argsp
    (94) ctes -> . ID
    (95) ctes -> . CTEI
    (96) ctes -> . CTEF
    (74) exp -> . termino expp
    (87) expbool -> . exp expboolp exp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
    ID              shift and go to state 112
    STRING          shift and go to state 117
    CTEC            shift and go to state 118
    CTEI            shift and go to state 104
    CTEF            shift and go to state 105
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65

  ! ID              [ reduce using rule 97 (empty -> .) ]
  ! CTEI            [ reduce using rule 97 (empty -> .) ]
  ! CTEF            [ reduce using rule 97 (empty -> .) ]

    args                           shift and go to state 113
    ctes                           shift and go to state 114
    exp                            shift and go to state 115
    expbool                        shift and go to state 116
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 73

    (37) ididx -> ACOR . exp CCOR
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 119
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 74

    (38) ididx -> empty .

    IGUAL           reduce using rule 38 (ididx -> empty .)
    COMA            reduce using rule 38 (ididx -> empty .)
    CPAR            reduce using rule 38 (ididx -> empty .)


state 75

    (82) factor -> APAR exp . CPAR

    CPAR            shift and go to state 120


state 76

    (1) program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA .

    $end            reduce using rule 1 (program -> PROGRAM ID PTCOMA varss funcs MAIN APAR CPAR ALLA estatutos CLLA .)


state 77

    (15) estatutos -> asig estatutop .

    CLLA            reduce using rule 15 (estatutos -> asig estatutop .)


state 78

    (24) estatutop -> estatutos .

    CLLA            reduce using rule 24 (estatutop -> estatutos .)


state 79

    (25) estatutop -> empty .
    (86) factorp -> empty .

    CLLA            reduce using rule 25 (estatutop -> empty .)
    ID              reduce using rule 86 (factorp -> empty .)
    CTEI            reduce using rule 86 (factorp -> empty .)
    CTEF            reduce using rule 86 (factorp -> empty .)


state 80

    (16) estatutos -> llamada estatutop .

    CLLA            reduce using rule 16 (estatutos -> llamada estatutop .)


state 81

    (17) estatutos -> return estatutop .

    CLLA            reduce using rule 17 (estatutos -> return estatutop .)


state 82

    (18) estatutos -> lectura estatutop .

    CLLA            reduce using rule 18 (estatutos -> lectura estatutop .)


state 83

    (19) estatutos -> escritura estatutop .

    CLLA            reduce using rule 19 (estatutos -> escritura estatutop .)


state 84

    (20) estatutos -> cond estatutop .

    CLLA            reduce using rule 20 (estatutos -> cond estatutop .)


state 85

    (21) estatutos -> while estatutop .

    CLLA            reduce using rule 21 (estatutos -> while estatutop .)


state 86

    (22) estatutos -> for estatutop .

    CLLA            reduce using rule 22 (estatutos -> for estatutop .)


state 87

    (23) estatutos -> exp estatutop .

    CLLA            reduce using rule 23 (estatutos -> exp estatutop .)


state 88

    (50) return -> RETURN APAR . returnp CPAR PTCOMA
    (51) returnp -> . exp
    (52) returnp -> . expbool
    (74) exp -> . termino expp
    (87) expbool -> . exp expboolp exp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    returnp                        shift and go to state 121
    exp                            shift and go to state 122
    expbool                        shift and go to state 123
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 89

    (53) lectura -> READ APAR . ID ididx lecturapp CPAR PTCOMA

    ID              shift and go to state 124


state 90

    (56) escritura -> WRITE APAR . escriturap escriturapp CPAR PTCOMA
    (57) escriturap -> . STRING
    (58) escriturap -> . exp
    (59) escriturap -> . expbool
    (60) escriturap -> . CTEC
    (74) exp -> . termino expp
    (87) expbool -> . exp expboolp exp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    STRING          shift and go to state 126
    CTEC            shift and go to state 129
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    escriturap                     shift and go to state 125
    exp                            shift and go to state 127
    expbool                        shift and go to state 128
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 91

    (63) cond -> IF APAR . condp CPAR THEN ALLA estatutos CLLA condpp
    (64) condp -> . expbool
    (65) condp -> . TRUE
    (66) condp -> . FALSE
    (87) expbool -> . exp expboolp exp
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    TRUE            shift and go to state 132
    FALSE           shift and go to state 133
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    condp                          shift and go to state 130
    expbool                        shift and go to state 131
    exp                            shift and go to state 134
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 92

    (69) while -> WHILE APAR . whilep CPAR DO ALLA estatutos CLLA
    (70) whilep -> . expbool
    (71) whilep -> . TRUE
    (72) whilep -> . FALSE
    (87) expbool -> . exp expboolp exp
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    TRUE            shift and go to state 137
    FALSE           shift and go to state 138
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    whilep                         shift and go to state 135
    expbool                        shift and go to state 136
    exp                            shift and go to state 134
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 93

    (73) for -> FOR ID . ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (37) ididx -> . ACOR exp CCOR
    (38) ididx -> . empty
    (97) empty -> .

    ACOR            shift and go to state 73
    IGUAL           reduce using rule 97 (empty -> .)

    ididx                          shift and go to state 139
    empty                          shift and go to state 74

state 94

    (74) exp -> termino expp .

    ID              reduce using rule 74 (exp -> termino expp .)
    RETURN          reduce using rule 74 (exp -> termino expp .)
    READ            reduce using rule 74 (exp -> termino expp .)
    WRITE           reduce using rule 74 (exp -> termino expp .)
    IF              reduce using rule 74 (exp -> termino expp .)
    WHILE           reduce using rule 74 (exp -> termino expp .)
    FOR             reduce using rule 74 (exp -> termino expp .)
    APAR            reduce using rule 74 (exp -> termino expp .)
    MAS             reduce using rule 74 (exp -> termino expp .)
    MENOS           reduce using rule 74 (exp -> termino expp .)
    CTEI            reduce using rule 74 (exp -> termino expp .)
    CTEF            reduce using rule 74 (exp -> termino expp .)
    CLLA            reduce using rule 74 (exp -> termino expp .)
    CPAR            reduce using rule 74 (exp -> termino expp .)
    COMA            reduce using rule 74 (exp -> termino expp .)
    MAYQ            reduce using rule 74 (exp -> termino expp .)
    MENQ            reduce using rule 74 (exp -> termino expp .)
    MAYI            reduce using rule 74 (exp -> termino expp .)
    MENI            reduce using rule 74 (exp -> termino expp .)
    IGUALIGUAL      reduce using rule 74 (exp -> termino expp .)
    DIF             reduce using rule 74 (exp -> termino expp .)
    CCOR            reduce using rule 74 (exp -> termino expp .)
    PTCOMA          reduce using rule 74 (exp -> termino expp .)
    TO              reduce using rule 74 (exp -> termino expp .)
    DO              reduce using rule 74 (exp -> termino expp .)


state 95

    (75) expp -> MAS . exp
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 140
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 96

    (76) expp -> MENOS . exp
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 141
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 97

    (77) expp -> empty .

    ID              reduce using rule 77 (expp -> empty .)
    RETURN          reduce using rule 77 (expp -> empty .)
    READ            reduce using rule 77 (expp -> empty .)
    WRITE           reduce using rule 77 (expp -> empty .)
    IF              reduce using rule 77 (expp -> empty .)
    WHILE           reduce using rule 77 (expp -> empty .)
    FOR             reduce using rule 77 (expp -> empty .)
    APAR            reduce using rule 77 (expp -> empty .)
    MAS             reduce using rule 77 (expp -> empty .)
    MENOS           reduce using rule 77 (expp -> empty .)
    CTEI            reduce using rule 77 (expp -> empty .)
    CTEF            reduce using rule 77 (expp -> empty .)
    CLLA            reduce using rule 77 (expp -> empty .)
    CPAR            reduce using rule 77 (expp -> empty .)
    COMA            reduce using rule 77 (expp -> empty .)
    MAYQ            reduce using rule 77 (expp -> empty .)
    MENQ            reduce using rule 77 (expp -> empty .)
    MAYI            reduce using rule 77 (expp -> empty .)
    MENI            reduce using rule 77 (expp -> empty .)
    IGUALIGUAL      reduce using rule 77 (expp -> empty .)
    DIF             reduce using rule 77 (expp -> empty .)
    CCOR            reduce using rule 77 (expp -> empty .)
    PTCOMA          reduce using rule 77 (expp -> empty .)
    TO              reduce using rule 77 (expp -> empty .)
    DO              reduce using rule 77 (expp -> empty .)


state 98

    (78) termino -> factor terminop .

    MAS             reduce using rule 78 (termino -> factor terminop .)
    MENOS           reduce using rule 78 (termino -> factor terminop .)
    ID              reduce using rule 78 (termino -> factor terminop .)
    RETURN          reduce using rule 78 (termino -> factor terminop .)
    READ            reduce using rule 78 (termino -> factor terminop .)
    WRITE           reduce using rule 78 (termino -> factor terminop .)
    IF              reduce using rule 78 (termino -> factor terminop .)
    WHILE           reduce using rule 78 (termino -> factor terminop .)
    FOR             reduce using rule 78 (termino -> factor terminop .)
    APAR            reduce using rule 78 (termino -> factor terminop .)
    CTEI            reduce using rule 78 (termino -> factor terminop .)
    CTEF            reduce using rule 78 (termino -> factor terminop .)
    CLLA            reduce using rule 78 (termino -> factor terminop .)
    CPAR            reduce using rule 78 (termino -> factor terminop .)
    COMA            reduce using rule 78 (termino -> factor terminop .)
    MAYQ            reduce using rule 78 (termino -> factor terminop .)
    MENQ            reduce using rule 78 (termino -> factor terminop .)
    MAYI            reduce using rule 78 (termino -> factor terminop .)
    MENI            reduce using rule 78 (termino -> factor terminop .)
    IGUALIGUAL      reduce using rule 78 (termino -> factor terminop .)
    DIF             reduce using rule 78 (termino -> factor terminop .)
    CCOR            reduce using rule 78 (termino -> factor terminop .)
    PTCOMA          reduce using rule 78 (termino -> factor terminop .)
    TO              reduce using rule 78 (termino -> factor terminop .)
    DO              reduce using rule 78 (termino -> factor terminop .)


state 99

    (79) terminop -> POR . termino
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    termino                        shift and go to state 142
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 100

    (80) terminop -> DIV . termino
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    termino                        shift and go to state 143
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 101

    (81) terminop -> empty .

    MAS             reduce using rule 81 (terminop -> empty .)
    MENOS           reduce using rule 81 (terminop -> empty .)
    ID              reduce using rule 81 (terminop -> empty .)
    RETURN          reduce using rule 81 (terminop -> empty .)
    READ            reduce using rule 81 (terminop -> empty .)
    WRITE           reduce using rule 81 (terminop -> empty .)
    IF              reduce using rule 81 (terminop -> empty .)
    WHILE           reduce using rule 81 (terminop -> empty .)
    FOR             reduce using rule 81 (terminop -> empty .)
    APAR            reduce using rule 81 (terminop -> empty .)
    CTEI            reduce using rule 81 (terminop -> empty .)
    CTEF            reduce using rule 81 (terminop -> empty .)
    CLLA            reduce using rule 81 (terminop -> empty .)
    CPAR            reduce using rule 81 (terminop -> empty .)
    COMA            reduce using rule 81 (terminop -> empty .)
    MAYQ            reduce using rule 81 (terminop -> empty .)
    MENQ            reduce using rule 81 (terminop -> empty .)
    MAYI            reduce using rule 81 (terminop -> empty .)
    MENI            reduce using rule 81 (terminop -> empty .)
    IGUALIGUAL      reduce using rule 81 (terminop -> empty .)
    DIF             reduce using rule 81 (terminop -> empty .)
    CCOR            reduce using rule 81 (terminop -> empty .)
    PTCOMA          reduce using rule 81 (terminop -> empty .)
    TO              reduce using rule 81 (terminop -> empty .)
    DO              reduce using rule 81 (terminop -> empty .)


state 102

    (83) factor -> factorp ctes .

    POR             reduce using rule 83 (factor -> factorp ctes .)
    DIV             reduce using rule 83 (factor -> factorp ctes .)
    MAS             reduce using rule 83 (factor -> factorp ctes .)
    MENOS           reduce using rule 83 (factor -> factorp ctes .)
    ID              reduce using rule 83 (factor -> factorp ctes .)
    RETURN          reduce using rule 83 (factor -> factorp ctes .)
    READ            reduce using rule 83 (factor -> factorp ctes .)
    WRITE           reduce using rule 83 (factor -> factorp ctes .)
    IF              reduce using rule 83 (factor -> factorp ctes .)
    WHILE           reduce using rule 83 (factor -> factorp ctes .)
    FOR             reduce using rule 83 (factor -> factorp ctes .)
    APAR            reduce using rule 83 (factor -> factorp ctes .)
    CTEI            reduce using rule 83 (factor -> factorp ctes .)
    CTEF            reduce using rule 83 (factor -> factorp ctes .)
    CLLA            reduce using rule 83 (factor -> factorp ctes .)
    CPAR            reduce using rule 83 (factor -> factorp ctes .)
    COMA            reduce using rule 83 (factor -> factorp ctes .)
    MAYQ            reduce using rule 83 (factor -> factorp ctes .)
    MENQ            reduce using rule 83 (factor -> factorp ctes .)
    MAYI            reduce using rule 83 (factor -> factorp ctes .)
    MENI            reduce using rule 83 (factor -> factorp ctes .)
    IGUALIGUAL      reduce using rule 83 (factor -> factorp ctes .)
    DIF             reduce using rule 83 (factor -> factorp ctes .)
    CCOR            reduce using rule 83 (factor -> factorp ctes .)
    PTCOMA          reduce using rule 83 (factor -> factorp ctes .)
    TO              reduce using rule 83 (factor -> factorp ctes .)
    DO              reduce using rule 83 (factor -> factorp ctes .)


state 103

    (94) ctes -> ID .

    POR             reduce using rule 94 (ctes -> ID .)
    DIV             reduce using rule 94 (ctes -> ID .)
    MAS             reduce using rule 94 (ctes -> ID .)
    MENOS           reduce using rule 94 (ctes -> ID .)
    ID              reduce using rule 94 (ctes -> ID .)
    RETURN          reduce using rule 94 (ctes -> ID .)
    READ            reduce using rule 94 (ctes -> ID .)
    WRITE           reduce using rule 94 (ctes -> ID .)
    IF              reduce using rule 94 (ctes -> ID .)
    WHILE           reduce using rule 94 (ctes -> ID .)
    FOR             reduce using rule 94 (ctes -> ID .)
    APAR            reduce using rule 94 (ctes -> ID .)
    CTEI            reduce using rule 94 (ctes -> ID .)
    CTEF            reduce using rule 94 (ctes -> ID .)
    CLLA            reduce using rule 94 (ctes -> ID .)
    CPAR            reduce using rule 94 (ctes -> ID .)
    COMA            reduce using rule 94 (ctes -> ID .)
    MAYQ            reduce using rule 94 (ctes -> ID .)
    MENQ            reduce using rule 94 (ctes -> ID .)
    MAYI            reduce using rule 94 (ctes -> ID .)
    MENI            reduce using rule 94 (ctes -> ID .)
    IGUALIGUAL      reduce using rule 94 (ctes -> ID .)
    DIF             reduce using rule 94 (ctes -> ID .)
    CCOR            reduce using rule 94 (ctes -> ID .)
    PTCOMA          reduce using rule 94 (ctes -> ID .)
    TO              reduce using rule 94 (ctes -> ID .)
    DO              reduce using rule 94 (ctes -> ID .)


state 104

    (95) ctes -> CTEI .

    POR             reduce using rule 95 (ctes -> CTEI .)
    DIV             reduce using rule 95 (ctes -> CTEI .)
    MAS             reduce using rule 95 (ctes -> CTEI .)
    MENOS           reduce using rule 95 (ctes -> CTEI .)
    ID              reduce using rule 95 (ctes -> CTEI .)
    RETURN          reduce using rule 95 (ctes -> CTEI .)
    READ            reduce using rule 95 (ctes -> CTEI .)
    WRITE           reduce using rule 95 (ctes -> CTEI .)
    IF              reduce using rule 95 (ctes -> CTEI .)
    WHILE           reduce using rule 95 (ctes -> CTEI .)
    FOR             reduce using rule 95 (ctes -> CTEI .)
    APAR            reduce using rule 95 (ctes -> CTEI .)
    CTEI            reduce using rule 95 (ctes -> CTEI .)
    CTEF            reduce using rule 95 (ctes -> CTEI .)
    CLLA            reduce using rule 95 (ctes -> CTEI .)
    CPAR            reduce using rule 95 (ctes -> CTEI .)
    COMA            reduce using rule 95 (ctes -> CTEI .)
    MAYQ            reduce using rule 95 (ctes -> CTEI .)
    MENQ            reduce using rule 95 (ctes -> CTEI .)
    MAYI            reduce using rule 95 (ctes -> CTEI .)
    MENI            reduce using rule 95 (ctes -> CTEI .)
    IGUALIGUAL      reduce using rule 95 (ctes -> CTEI .)
    DIF             reduce using rule 95 (ctes -> CTEI .)
    CCOR            reduce using rule 95 (ctes -> CTEI .)
    PTCOMA          reduce using rule 95 (ctes -> CTEI .)
    TO              reduce using rule 95 (ctes -> CTEI .)
    DO              reduce using rule 95 (ctes -> CTEI .)


state 105

    (96) ctes -> CTEF .

    POR             reduce using rule 96 (ctes -> CTEF .)
    DIV             reduce using rule 96 (ctes -> CTEF .)
    MAS             reduce using rule 96 (ctes -> CTEF .)
    MENOS           reduce using rule 96 (ctes -> CTEF .)
    ID              reduce using rule 96 (ctes -> CTEF .)
    RETURN          reduce using rule 96 (ctes -> CTEF .)
    READ            reduce using rule 96 (ctes -> CTEF .)
    WRITE           reduce using rule 96 (ctes -> CTEF .)
    IF              reduce using rule 96 (ctes -> CTEF .)
    WHILE           reduce using rule 96 (ctes -> CTEF .)
    FOR             reduce using rule 96 (ctes -> CTEF .)
    APAR            reduce using rule 96 (ctes -> CTEF .)
    CTEI            reduce using rule 96 (ctes -> CTEF .)
    CTEF            reduce using rule 96 (ctes -> CTEF .)
    CLLA            reduce using rule 96 (ctes -> CTEF .)
    CPAR            reduce using rule 96 (ctes -> CTEF .)
    COMA            reduce using rule 96 (ctes -> CTEF .)
    MAYQ            reduce using rule 96 (ctes -> CTEF .)
    MENQ            reduce using rule 96 (ctes -> CTEF .)
    MAYI            reduce using rule 96 (ctes -> CTEF .)
    MENI            reduce using rule 96 (ctes -> CTEF .)
    IGUALIGUAL      reduce using rule 96 (ctes -> CTEF .)
    DIF             reduce using rule 96 (ctes -> CTEF .)
    CCOR            reduce using rule 96 (ctes -> CTEF .)
    PTCOMA          reduce using rule 96 (ctes -> CTEF .)
    TO              reduce using rule 96 (ctes -> CTEF .)
    DO              reduce using rule 96 (ctes -> CTEF .)


state 106

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA . varss ALLA estatutos CLLA funcs
    (2) varss -> . VARS vars
    (3) varss -> . empty
    (97) empty -> .

    VARS            shift and go to state 6
    ALLA            reduce using rule 97 (empty -> .)

    varss                          shift and go to state 144
    empty                          shift and go to state 7

state 107

    (31) params -> tipo ID paramsp .

    CPAR            reduce using rule 31 (params -> tipo ID paramsp .)


state 108

    (33) paramsp -> COMA . params
    (31) params -> . tipo ID paramsp
    (32) params -> . empty
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL
    (97) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18
    CPAR            reduce using rule 97 (empty -> .)

    params                         shift and go to state 145
    tipo                           shift and go to state 38
    empty                          shift and go to state 39

state 109

    (34) paramsp -> ACOR . CCOR params

    CCOR            shift and go to state 146


state 110

    (35) paramsp -> empty .

    CPAR            reduce using rule 35 (paramsp -> empty .)


state 111

    (36) asig -> ID ididx IGUAL . asigpp PTCOMA
    (39) asigpp -> . exp
    (40) asigpp -> . expbool
    (74) exp -> . termino expp
    (87) expbool -> . exp expboolp exp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    asigpp                         shift and go to state 147
    exp                            shift and go to state 148
    expbool                        shift and go to state 149
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 112

    (43) args -> ID . ididx argsp
    (94) ctes -> ID .
    (37) ididx -> . ACOR exp CCOR
    (38) ididx -> . empty
    (97) empty -> .

  ! reduce/reduce conflict for COMA resolved using rule 94 (ctes -> ID .)
  ! reduce/reduce conflict for CPAR resolved using rule 94 (ctes -> ID .)
    COMA            reduce using rule 94 (ctes -> ID .)
    CPAR            reduce using rule 94 (ctes -> ID .)
    ACOR            shift and go to state 73

  ! COMA            [ reduce using rule 97 (empty -> .) ]
  ! CPAR            [ reduce using rule 97 (empty -> .) ]

    ididx                          shift and go to state 150
    empty                          shift and go to state 74

state 113

    (41) llamada -> ID APAR args . CPAR PTCOMA

    CPAR            shift and go to state 151


state 114

    (42) args -> ctes . argsp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 153
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 152
    empty                          shift and go to state 154

state 115

    (44) args -> exp . argsp
    (87) expbool -> exp . expboolp exp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (88) expboolp -> . MAYQ
    (89) expboolp -> . MENQ
    (90) expboolp -> . MAYI
    (91) expboolp -> . MENI
    (92) expboolp -> . IGUALIGUAL
    (93) expboolp -> . DIF
    (97) empty -> .

    COMA            shift and go to state 153
    MAYQ            shift and go to state 157
    MENQ            shift and go to state 158
    MAYI            shift and go to state 159
    MENI            shift and go to state 160
    IGUALIGUAL      shift and go to state 161
    DIF             shift and go to state 162
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 155
    expboolp                       shift and go to state 156
    empty                          shift and go to state 154

state 116

    (45) args -> expbool . argsp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 153
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 163
    empty                          shift and go to state 154

state 117

    (46) args -> STRING . argsp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 153
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 164
    empty                          shift and go to state 154

state 118

    (47) args -> CTEC . argsp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 153
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 165
    empty                          shift and go to state 154

state 119

    (37) ididx -> ACOR exp . CCOR

    CCOR            shift and go to state 166


state 120

    (82) factor -> APAR exp CPAR .

    POR             reduce using rule 82 (factor -> APAR exp CPAR .)
    DIV             reduce using rule 82 (factor -> APAR exp CPAR .)
    MAS             reduce using rule 82 (factor -> APAR exp CPAR .)
    MENOS           reduce using rule 82 (factor -> APAR exp CPAR .)
    ID              reduce using rule 82 (factor -> APAR exp CPAR .)
    RETURN          reduce using rule 82 (factor -> APAR exp CPAR .)
    READ            reduce using rule 82 (factor -> APAR exp CPAR .)
    WRITE           reduce using rule 82 (factor -> APAR exp CPAR .)
    IF              reduce using rule 82 (factor -> APAR exp CPAR .)
    WHILE           reduce using rule 82 (factor -> APAR exp CPAR .)
    FOR             reduce using rule 82 (factor -> APAR exp CPAR .)
    APAR            reduce using rule 82 (factor -> APAR exp CPAR .)
    CTEI            reduce using rule 82 (factor -> APAR exp CPAR .)
    CTEF            reduce using rule 82 (factor -> APAR exp CPAR .)
    CLLA            reduce using rule 82 (factor -> APAR exp CPAR .)
    CPAR            reduce using rule 82 (factor -> APAR exp CPAR .)
    COMA            reduce using rule 82 (factor -> APAR exp CPAR .)
    MAYQ            reduce using rule 82 (factor -> APAR exp CPAR .)
    MENQ            reduce using rule 82 (factor -> APAR exp CPAR .)
    MAYI            reduce using rule 82 (factor -> APAR exp CPAR .)
    MENI            reduce using rule 82 (factor -> APAR exp CPAR .)
    IGUALIGUAL      reduce using rule 82 (factor -> APAR exp CPAR .)
    DIF             reduce using rule 82 (factor -> APAR exp CPAR .)
    CCOR            reduce using rule 82 (factor -> APAR exp CPAR .)
    PTCOMA          reduce using rule 82 (factor -> APAR exp CPAR .)
    TO              reduce using rule 82 (factor -> APAR exp CPAR .)
    DO              reduce using rule 82 (factor -> APAR exp CPAR .)


state 121

    (50) return -> RETURN APAR returnp . CPAR PTCOMA

    CPAR            shift and go to state 167


state 122

    (51) returnp -> exp .
    (87) expbool -> exp . expboolp exp
    (88) expboolp -> . MAYQ
    (89) expboolp -> . MENQ
    (90) expboolp -> . MAYI
    (91) expboolp -> . MENI
    (92) expboolp -> . IGUALIGUAL
    (93) expboolp -> . DIF

    CPAR            reduce using rule 51 (returnp -> exp .)
    MAYQ            shift and go to state 157
    MENQ            shift and go to state 158
    MAYI            shift and go to state 159
    MENI            shift and go to state 160
    IGUALIGUAL      shift and go to state 161
    DIF             shift and go to state 162

    expboolp                       shift and go to state 156

state 123

    (52) returnp -> expbool .

    CPAR            reduce using rule 52 (returnp -> expbool .)


state 124

    (53) lectura -> READ APAR ID . ididx lecturapp CPAR PTCOMA
    (37) ididx -> . ACOR exp CCOR
    (38) ididx -> . empty
    (97) empty -> .

    ACOR            shift and go to state 73
    COMA            reduce using rule 97 (empty -> .)
    CPAR            reduce using rule 97 (empty -> .)

    ididx                          shift and go to state 168
    empty                          shift and go to state 74

state 125

    (56) escritura -> WRITE APAR escriturap . escriturapp CPAR PTCOMA
    (61) escriturapp -> . COMA
    (62) escriturapp -> . empty
    (97) empty -> .

    COMA            shift and go to state 170
    CPAR            reduce using rule 97 (empty -> .)

    escriturapp                    shift and go to state 169
    empty                          shift and go to state 171

state 126

    (57) escriturap -> STRING .

    COMA            reduce using rule 57 (escriturap -> STRING .)
    CPAR            reduce using rule 57 (escriturap -> STRING .)


state 127

    (58) escriturap -> exp .
    (87) expbool -> exp . expboolp exp
    (88) expboolp -> . MAYQ
    (89) expboolp -> . MENQ
    (90) expboolp -> . MAYI
    (91) expboolp -> . MENI
    (92) expboolp -> . IGUALIGUAL
    (93) expboolp -> . DIF

    COMA            reduce using rule 58 (escriturap -> exp .)
    CPAR            reduce using rule 58 (escriturap -> exp .)
    MAYQ            shift and go to state 157
    MENQ            shift and go to state 158
    MAYI            shift and go to state 159
    MENI            shift and go to state 160
    IGUALIGUAL      shift and go to state 161
    DIF             shift and go to state 162

    expboolp                       shift and go to state 156

state 128

    (59) escriturap -> expbool .

    COMA            reduce using rule 59 (escriturap -> expbool .)
    CPAR            reduce using rule 59 (escriturap -> expbool .)


state 129

    (60) escriturap -> CTEC .

    COMA            reduce using rule 60 (escriturap -> CTEC .)
    CPAR            reduce using rule 60 (escriturap -> CTEC .)


state 130

    (63) cond -> IF APAR condp . CPAR THEN ALLA estatutos CLLA condpp

    CPAR            shift and go to state 172


state 131

    (64) condp -> expbool .

    CPAR            reduce using rule 64 (condp -> expbool .)


state 132

    (65) condp -> TRUE .

    CPAR            reduce using rule 65 (condp -> TRUE .)


state 133

    (66) condp -> FALSE .

    CPAR            reduce using rule 66 (condp -> FALSE .)


state 134

    (87) expbool -> exp . expboolp exp
    (88) expboolp -> . MAYQ
    (89) expboolp -> . MENQ
    (90) expboolp -> . MAYI
    (91) expboolp -> . MENI
    (92) expboolp -> . IGUALIGUAL
    (93) expboolp -> . DIF

    MAYQ            shift and go to state 157
    MENQ            shift and go to state 158
    MAYI            shift and go to state 159
    MENI            shift and go to state 160
    IGUALIGUAL      shift and go to state 161
    DIF             shift and go to state 162

    expboolp                       shift and go to state 156

state 135

    (69) while -> WHILE APAR whilep . CPAR DO ALLA estatutos CLLA

    CPAR            shift and go to state 173


state 136

    (70) whilep -> expbool .

    CPAR            reduce using rule 70 (whilep -> expbool .)


state 137

    (71) whilep -> TRUE .

    CPAR            reduce using rule 71 (whilep -> TRUE .)


state 138

    (72) whilep -> FALSE .

    CPAR            reduce using rule 72 (whilep -> FALSE .)


state 139

    (73) for -> FOR ID ididx . IGUAL exp TO exp DO ALLA estatutos CLLA

    IGUAL           shift and go to state 174


state 140

    (75) expp -> MAS exp .

    ID              reduce using rule 75 (expp -> MAS exp .)
    RETURN          reduce using rule 75 (expp -> MAS exp .)
    READ            reduce using rule 75 (expp -> MAS exp .)
    WRITE           reduce using rule 75 (expp -> MAS exp .)
    IF              reduce using rule 75 (expp -> MAS exp .)
    WHILE           reduce using rule 75 (expp -> MAS exp .)
    FOR             reduce using rule 75 (expp -> MAS exp .)
    APAR            reduce using rule 75 (expp -> MAS exp .)
    MAS             reduce using rule 75 (expp -> MAS exp .)
    MENOS           reduce using rule 75 (expp -> MAS exp .)
    CTEI            reduce using rule 75 (expp -> MAS exp .)
    CTEF            reduce using rule 75 (expp -> MAS exp .)
    CLLA            reduce using rule 75 (expp -> MAS exp .)
    CPAR            reduce using rule 75 (expp -> MAS exp .)
    COMA            reduce using rule 75 (expp -> MAS exp .)
    MAYQ            reduce using rule 75 (expp -> MAS exp .)
    MENQ            reduce using rule 75 (expp -> MAS exp .)
    MAYI            reduce using rule 75 (expp -> MAS exp .)
    MENI            reduce using rule 75 (expp -> MAS exp .)
    IGUALIGUAL      reduce using rule 75 (expp -> MAS exp .)
    DIF             reduce using rule 75 (expp -> MAS exp .)
    CCOR            reduce using rule 75 (expp -> MAS exp .)
    PTCOMA          reduce using rule 75 (expp -> MAS exp .)
    TO              reduce using rule 75 (expp -> MAS exp .)
    DO              reduce using rule 75 (expp -> MAS exp .)


state 141

    (76) expp -> MENOS exp .

    ID              reduce using rule 76 (expp -> MENOS exp .)
    RETURN          reduce using rule 76 (expp -> MENOS exp .)
    READ            reduce using rule 76 (expp -> MENOS exp .)
    WRITE           reduce using rule 76 (expp -> MENOS exp .)
    IF              reduce using rule 76 (expp -> MENOS exp .)
    WHILE           reduce using rule 76 (expp -> MENOS exp .)
    FOR             reduce using rule 76 (expp -> MENOS exp .)
    APAR            reduce using rule 76 (expp -> MENOS exp .)
    MAS             reduce using rule 76 (expp -> MENOS exp .)
    MENOS           reduce using rule 76 (expp -> MENOS exp .)
    CTEI            reduce using rule 76 (expp -> MENOS exp .)
    CTEF            reduce using rule 76 (expp -> MENOS exp .)
    CLLA            reduce using rule 76 (expp -> MENOS exp .)
    CPAR            reduce using rule 76 (expp -> MENOS exp .)
    COMA            reduce using rule 76 (expp -> MENOS exp .)
    MAYQ            reduce using rule 76 (expp -> MENOS exp .)
    MENQ            reduce using rule 76 (expp -> MENOS exp .)
    MAYI            reduce using rule 76 (expp -> MENOS exp .)
    MENI            reduce using rule 76 (expp -> MENOS exp .)
    IGUALIGUAL      reduce using rule 76 (expp -> MENOS exp .)
    DIF             reduce using rule 76 (expp -> MENOS exp .)
    CCOR            reduce using rule 76 (expp -> MENOS exp .)
    PTCOMA          reduce using rule 76 (expp -> MENOS exp .)
    TO              reduce using rule 76 (expp -> MENOS exp .)
    DO              reduce using rule 76 (expp -> MENOS exp .)


state 142

    (79) terminop -> POR termino .

    MAS             reduce using rule 79 (terminop -> POR termino .)
    MENOS           reduce using rule 79 (terminop -> POR termino .)
    ID              reduce using rule 79 (terminop -> POR termino .)
    RETURN          reduce using rule 79 (terminop -> POR termino .)
    READ            reduce using rule 79 (terminop -> POR termino .)
    WRITE           reduce using rule 79 (terminop -> POR termino .)
    IF              reduce using rule 79 (terminop -> POR termino .)
    WHILE           reduce using rule 79 (terminop -> POR termino .)
    FOR             reduce using rule 79 (terminop -> POR termino .)
    APAR            reduce using rule 79 (terminop -> POR termino .)
    CTEI            reduce using rule 79 (terminop -> POR termino .)
    CTEF            reduce using rule 79 (terminop -> POR termino .)
    CLLA            reduce using rule 79 (terminop -> POR termino .)
    CPAR            reduce using rule 79 (terminop -> POR termino .)
    COMA            reduce using rule 79 (terminop -> POR termino .)
    MAYQ            reduce using rule 79 (terminop -> POR termino .)
    MENQ            reduce using rule 79 (terminop -> POR termino .)
    MAYI            reduce using rule 79 (terminop -> POR termino .)
    MENI            reduce using rule 79 (terminop -> POR termino .)
    IGUALIGUAL      reduce using rule 79 (terminop -> POR termino .)
    DIF             reduce using rule 79 (terminop -> POR termino .)
    CCOR            reduce using rule 79 (terminop -> POR termino .)
    PTCOMA          reduce using rule 79 (terminop -> POR termino .)
    TO              reduce using rule 79 (terminop -> POR termino .)
    DO              reduce using rule 79 (terminop -> POR termino .)


state 143

    (80) terminop -> DIV termino .

    MAS             reduce using rule 80 (terminop -> DIV termino .)
    MENOS           reduce using rule 80 (terminop -> DIV termino .)
    ID              reduce using rule 80 (terminop -> DIV termino .)
    RETURN          reduce using rule 80 (terminop -> DIV termino .)
    READ            reduce using rule 80 (terminop -> DIV termino .)
    WRITE           reduce using rule 80 (terminop -> DIV termino .)
    IF              reduce using rule 80 (terminop -> DIV termino .)
    WHILE           reduce using rule 80 (terminop -> DIV termino .)
    FOR             reduce using rule 80 (terminop -> DIV termino .)
    APAR            reduce using rule 80 (terminop -> DIV termino .)
    CTEI            reduce using rule 80 (terminop -> DIV termino .)
    CTEF            reduce using rule 80 (terminop -> DIV termino .)
    CLLA            reduce using rule 80 (terminop -> DIV termino .)
    CPAR            reduce using rule 80 (terminop -> DIV termino .)
    COMA            reduce using rule 80 (terminop -> DIV termino .)
    MAYQ            reduce using rule 80 (terminop -> DIV termino .)
    MENQ            reduce using rule 80 (terminop -> DIV termino .)
    MAYI            reduce using rule 80 (terminop -> DIV termino .)
    MENI            reduce using rule 80 (terminop -> DIV termino .)
    IGUALIGUAL      reduce using rule 80 (terminop -> DIV termino .)
    DIF             reduce using rule 80 (terminop -> DIV termino .)
    CCOR            reduce using rule 80 (terminop -> DIV termino .)
    PTCOMA          reduce using rule 80 (terminop -> DIV termino .)
    TO              reduce using rule 80 (terminop -> DIV termino .)
    DO              reduce using rule 80 (terminop -> DIV termino .)


state 144

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss . ALLA estatutos CLLA funcs

    ALLA            shift and go to state 175


state 145

    (33) paramsp -> COMA params .

    CPAR            reduce using rule 33 (paramsp -> COMA params .)


state 146

    (34) paramsp -> ACOR CCOR . params
    (31) params -> . tipo ID paramsp
    (32) params -> . empty
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHAR
    (29) tipo -> . STR
    (30) tipo -> . BOOL
    (97) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    STR             shift and go to state 17
    BOOL            shift and go to state 18
    CPAR            reduce using rule 97 (empty -> .)

    params                         shift and go to state 176
    tipo                           shift and go to state 38
    empty                          shift and go to state 39

state 147

    (36) asig -> ID ididx IGUAL asigpp . PTCOMA

    PTCOMA          shift and go to state 177


state 148

    (39) asigpp -> exp .
    (87) expbool -> exp . expboolp exp
    (88) expboolp -> . MAYQ
    (89) expboolp -> . MENQ
    (90) expboolp -> . MAYI
    (91) expboolp -> . MENI
    (92) expboolp -> . IGUALIGUAL
    (93) expboolp -> . DIF

    PTCOMA          reduce using rule 39 (asigpp -> exp .)
    MAYQ            shift and go to state 157
    MENQ            shift and go to state 158
    MAYI            shift and go to state 159
    MENI            shift and go to state 160
    IGUALIGUAL      shift and go to state 161
    DIF             shift and go to state 162

    expboolp                       shift and go to state 156

state 149

    (40) asigpp -> expbool .

    PTCOMA          reduce using rule 40 (asigpp -> expbool .)


state 150

    (43) args -> ID ididx . argsp
    (48) argsp -> . COMA
    (49) argsp -> . empty
    (97) empty -> .

    COMA            shift and go to state 153
    CPAR            reduce using rule 97 (empty -> .)

    argsp                          shift and go to state 178
    empty                          shift and go to state 154

state 151

    (41) llamada -> ID APAR args CPAR . PTCOMA

    PTCOMA          shift and go to state 179


state 152

    (42) args -> ctes argsp .

    CPAR            reduce using rule 42 (args -> ctes argsp .)


state 153

    (48) argsp -> COMA .

    CPAR            reduce using rule 48 (argsp -> COMA .)


state 154

    (49) argsp -> empty .

    CPAR            reduce using rule 49 (argsp -> empty .)


state 155

    (44) args -> exp argsp .

    CPAR            reduce using rule 44 (args -> exp argsp .)


state 156

    (87) expbool -> exp expboolp . exp
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 180
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 157

    (88) expboolp -> MAYQ .

    APAR            reduce using rule 88 (expboolp -> MAYQ .)
    MAS             reduce using rule 88 (expboolp -> MAYQ .)
    MENOS           reduce using rule 88 (expboolp -> MAYQ .)
    ID              reduce using rule 88 (expboolp -> MAYQ .)
    CTEI            reduce using rule 88 (expboolp -> MAYQ .)
    CTEF            reduce using rule 88 (expboolp -> MAYQ .)


state 158

    (89) expboolp -> MENQ .

    APAR            reduce using rule 89 (expboolp -> MENQ .)
    MAS             reduce using rule 89 (expboolp -> MENQ .)
    MENOS           reduce using rule 89 (expboolp -> MENQ .)
    ID              reduce using rule 89 (expboolp -> MENQ .)
    CTEI            reduce using rule 89 (expboolp -> MENQ .)
    CTEF            reduce using rule 89 (expboolp -> MENQ .)


state 159

    (90) expboolp -> MAYI .

    APAR            reduce using rule 90 (expboolp -> MAYI .)
    MAS             reduce using rule 90 (expboolp -> MAYI .)
    MENOS           reduce using rule 90 (expboolp -> MAYI .)
    ID              reduce using rule 90 (expboolp -> MAYI .)
    CTEI            reduce using rule 90 (expboolp -> MAYI .)
    CTEF            reduce using rule 90 (expboolp -> MAYI .)


state 160

    (91) expboolp -> MENI .

    APAR            reduce using rule 91 (expboolp -> MENI .)
    MAS             reduce using rule 91 (expboolp -> MENI .)
    MENOS           reduce using rule 91 (expboolp -> MENI .)
    ID              reduce using rule 91 (expboolp -> MENI .)
    CTEI            reduce using rule 91 (expboolp -> MENI .)
    CTEF            reduce using rule 91 (expboolp -> MENI .)


state 161

    (92) expboolp -> IGUALIGUAL .

    APAR            reduce using rule 92 (expboolp -> IGUALIGUAL .)
    MAS             reduce using rule 92 (expboolp -> IGUALIGUAL .)
    MENOS           reduce using rule 92 (expboolp -> IGUALIGUAL .)
    ID              reduce using rule 92 (expboolp -> IGUALIGUAL .)
    CTEI            reduce using rule 92 (expboolp -> IGUALIGUAL .)
    CTEF            reduce using rule 92 (expboolp -> IGUALIGUAL .)


state 162

    (93) expboolp -> DIF .

    APAR            reduce using rule 93 (expboolp -> DIF .)
    MAS             reduce using rule 93 (expboolp -> DIF .)
    MENOS           reduce using rule 93 (expboolp -> DIF .)
    ID              reduce using rule 93 (expboolp -> DIF .)
    CTEI            reduce using rule 93 (expboolp -> DIF .)
    CTEF            reduce using rule 93 (expboolp -> DIF .)


state 163

    (45) args -> expbool argsp .

    CPAR            reduce using rule 45 (args -> expbool argsp .)


state 164

    (46) args -> STRING argsp .

    CPAR            reduce using rule 46 (args -> STRING argsp .)


state 165

    (47) args -> CTEC argsp .

    CPAR            reduce using rule 47 (args -> CTEC argsp .)


state 166

    (37) ididx -> ACOR exp CCOR .

    IGUAL           reduce using rule 37 (ididx -> ACOR exp CCOR .)
    COMA            reduce using rule 37 (ididx -> ACOR exp CCOR .)
    CPAR            reduce using rule 37 (ididx -> ACOR exp CCOR .)


state 167

    (50) return -> RETURN APAR returnp CPAR . PTCOMA

    PTCOMA          shift and go to state 181


state 168

    (53) lectura -> READ APAR ID ididx . lecturapp CPAR PTCOMA
    (54) lecturapp -> . COMA
    (55) lecturapp -> . empty
    (97) empty -> .

    COMA            shift and go to state 183
    CPAR            reduce using rule 97 (empty -> .)

    lecturapp                      shift and go to state 182
    empty                          shift and go to state 184

state 169

    (56) escritura -> WRITE APAR escriturap escriturapp . CPAR PTCOMA

    CPAR            shift and go to state 185


state 170

    (61) escriturapp -> COMA .

    CPAR            reduce using rule 61 (escriturapp -> COMA .)


state 171

    (62) escriturapp -> empty .

    CPAR            reduce using rule 62 (escriturapp -> empty .)


state 172

    (63) cond -> IF APAR condp CPAR . THEN ALLA estatutos CLLA condpp

    THEN            shift and go to state 186


state 173

    (69) while -> WHILE APAR whilep CPAR . DO ALLA estatutos CLLA

    DO              shift and go to state 187


state 174

    (73) for -> FOR ID ididx IGUAL . exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 188
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 175

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA . estatutos CLLA funcs
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    estatutos                      shift and go to state 189
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 176

    (34) paramsp -> ACOR CCOR params .

    CPAR            reduce using rule 34 (paramsp -> ACOR CCOR params .)


state 177

    (36) asig -> ID ididx IGUAL asigpp PTCOMA .

    ID              reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    RETURN          reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    READ            reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    WRITE           reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    IF              reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    WHILE           reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    FOR             reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    APAR            reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    MAS             reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    MENOS           reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    CTEI            reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    CTEF            reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)
    CLLA            reduce using rule 36 (asig -> ID ididx IGUAL asigpp PTCOMA .)


state 178

    (43) args -> ID ididx argsp .

    CPAR            reduce using rule 43 (args -> ID ididx argsp .)


state 179

    (41) llamada -> ID APAR args CPAR PTCOMA .

    ID              reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    RETURN          reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    READ            reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    WRITE           reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    IF              reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    WHILE           reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    FOR             reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    APAR            reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    MAS             reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    MENOS           reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    CTEI            reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    CTEF            reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)
    CLLA            reduce using rule 41 (llamada -> ID APAR args CPAR PTCOMA .)


state 180

    (87) expbool -> exp expboolp exp .

    COMA            reduce using rule 87 (expbool -> exp expboolp exp .)
    CPAR            reduce using rule 87 (expbool -> exp expboolp exp .)
    PTCOMA          reduce using rule 87 (expbool -> exp expboolp exp .)


state 181

    (50) return -> RETURN APAR returnp CPAR PTCOMA .

    ID              reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    RETURN          reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    READ            reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    WRITE           reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    IF              reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    WHILE           reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    FOR             reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    APAR            reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    MAS             reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    MENOS           reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    CTEI            reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    CTEF            reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)
    CLLA            reduce using rule 50 (return -> RETURN APAR returnp CPAR PTCOMA .)


state 182

    (53) lectura -> READ APAR ID ididx lecturapp . CPAR PTCOMA

    CPAR            shift and go to state 190


state 183

    (54) lecturapp -> COMA .

    CPAR            reduce using rule 54 (lecturapp -> COMA .)


state 184

    (55) lecturapp -> empty .

    CPAR            reduce using rule 55 (lecturapp -> empty .)


state 185

    (56) escritura -> WRITE APAR escriturap escriturapp CPAR . PTCOMA

    PTCOMA          shift and go to state 191


state 186

    (63) cond -> IF APAR condp CPAR THEN . ALLA estatutos CLLA condpp

    ALLA            shift and go to state 192


state 187

    (69) while -> WHILE APAR whilep CPAR DO . ALLA estatutos CLLA

    ALLA            shift and go to state 193


state 188

    (73) for -> FOR ID ididx IGUAL exp . TO exp DO ALLA estatutos CLLA

    TO              shift and go to state 194


state 189

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos . CLLA funcs

    CLLA            shift and go to state 195


state 190

    (53) lectura -> READ APAR ID ididx lecturapp CPAR . PTCOMA

    PTCOMA          shift and go to state 196


state 191

    (56) escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .

    ID              reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    RETURN          reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    READ            reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    WRITE           reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    IF              reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    WHILE           reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    FOR             reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    APAR            reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    MAS             reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    MENOS           reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    CTEI            reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    CTEF            reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)
    CLLA            reduce using rule 56 (escritura -> WRITE APAR escriturap escriturapp CPAR PTCOMA .)


state 192

    (63) cond -> IF APAR condp CPAR THEN ALLA . estatutos CLLA condpp
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    estatutos                      shift and go to state 197
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 193

    (69) while -> WHILE APAR whilep CPAR DO ALLA . estatutos CLLA
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    estatutos                      shift and go to state 198
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 194

    (73) for -> FOR ID ididx IGUAL exp TO . exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    ID              reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

    exp                            shift and go to state 199
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 195

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA . funcs
    (11) funcs -> . FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs
    (12) funcs -> . empty
    (97) empty -> .

    FUNCTION        shift and go to state 9
    MAIN            reduce using rule 97 (empty -> .)

    funcs                          shift and go to state 200
    empty                          shift and go to state 10

state 196

    (53) lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .

    ID              reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    RETURN          reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    READ            reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    WRITE           reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    IF              reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    WHILE           reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    FOR             reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    APAR            reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    MAS             reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    MENOS           reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    CTEI            reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    CTEF            reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)
    CLLA            reduce using rule 53 (lectura -> READ APAR ID ididx lecturapp CPAR PTCOMA .)


state 197

    (63) cond -> IF APAR condp CPAR THEN ALLA estatutos . CLLA condpp

    CLLA            shift and go to state 201


state 198

    (69) while -> WHILE APAR whilep CPAR DO ALLA estatutos . CLLA

    CLLA            shift and go to state 202


state 199

    (73) for -> FOR ID ididx IGUAL exp TO exp . DO ALLA estatutos CLLA

    DO              shift and go to state 203


state 200

    (11) funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs .

    MAIN            reduce using rule 11 (funcs -> FUNCTION funcsp ID APAR params CPAR PTCOMA varss ALLA estatutos CLLA funcs .)


state 201

    (63) cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA . condpp
    (67) condpp -> . ELSE ALLA estatutos CLLA
    (68) condpp -> . empty
    (97) empty -> .

    ELSE            shift and go to state 205
    ID              reduce using rule 97 (empty -> .)
    RETURN          reduce using rule 97 (empty -> .)
    READ            reduce using rule 97 (empty -> .)
    WRITE           reduce using rule 97 (empty -> .)
    IF              reduce using rule 97 (empty -> .)
    WHILE           reduce using rule 97 (empty -> .)
    FOR             reduce using rule 97 (empty -> .)
    APAR            reduce using rule 97 (empty -> .)
    MAS             reduce using rule 97 (empty -> .)
    MENOS           reduce using rule 97 (empty -> .)
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)
    CLLA            reduce using rule 97 (empty -> .)

    condpp                         shift and go to state 204
    empty                          shift and go to state 206

state 202

    (69) while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .

    ID              reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    RETURN          reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    READ            reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    WRITE           reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    IF              reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    WHILE           reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    FOR             reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    APAR            reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    MAS             reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    MENOS           reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    CTEI            reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    CTEF            reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)
    CLLA            reduce using rule 69 (while -> WHILE APAR whilep CPAR DO ALLA estatutos CLLA .)


state 203

    (73) for -> FOR ID ididx IGUAL exp TO exp DO . ALLA estatutos CLLA

    ALLA            shift and go to state 207


state 204

    (63) cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .

    ID              reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    RETURN          reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    READ            reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    WRITE           reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    IF              reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    WHILE           reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    FOR             reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    APAR            reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    MAS             reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    MENOS           reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    CTEI            reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    CTEF            reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)
    CLLA            reduce using rule 63 (cond -> IF APAR condp CPAR THEN ALLA estatutos CLLA condpp .)


state 205

    (67) condpp -> ELSE . ALLA estatutos CLLA

    ALLA            shift and go to state 208


state 206

    (68) condpp -> empty .

    ID              reduce using rule 68 (condpp -> empty .)
    RETURN          reduce using rule 68 (condpp -> empty .)
    READ            reduce using rule 68 (condpp -> empty .)
    WRITE           reduce using rule 68 (condpp -> empty .)
    IF              reduce using rule 68 (condpp -> empty .)
    WHILE           reduce using rule 68 (condpp -> empty .)
    FOR             reduce using rule 68 (condpp -> empty .)
    APAR            reduce using rule 68 (condpp -> empty .)
    MAS             reduce using rule 68 (condpp -> empty .)
    MENOS           reduce using rule 68 (condpp -> empty .)
    CTEI            reduce using rule 68 (condpp -> empty .)
    CTEF            reduce using rule 68 (condpp -> empty .)
    CLLA            reduce using rule 68 (condpp -> empty .)


state 207

    (73) for -> FOR ID ididx IGUAL exp TO exp DO ALLA . estatutos CLLA
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    exp                            shift and go to state 54
    estatutos                      shift and go to state 209
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 208

    (67) condpp -> ELSE ALLA . estatutos CLLA
    (15) estatutos -> . asig estatutop
    (16) estatutos -> . llamada estatutop
    (17) estatutos -> . return estatutop
    (18) estatutos -> . lectura estatutop
    (19) estatutos -> . escritura estatutop
    (20) estatutos -> . cond estatutop
    (21) estatutos -> . while estatutop
    (22) estatutos -> . for estatutop
    (23) estatutos -> . exp estatutop
    (36) asig -> . ID ididx IGUAL asigpp PTCOMA
    (41) llamada -> . ID APAR args CPAR PTCOMA
    (50) return -> . RETURN APAR returnp CPAR PTCOMA
    (53) lectura -> . READ APAR ID ididx lecturapp CPAR PTCOMA
    (56) escritura -> . WRITE APAR escriturap escriturapp CPAR PTCOMA
    (63) cond -> . IF APAR condp CPAR THEN ALLA estatutos CLLA condpp
    (69) while -> . WHILE APAR whilep CPAR DO ALLA estatutos CLLA
    (73) for -> . FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA
    (74) exp -> . termino expp
    (78) termino -> . factor terminop
    (82) factor -> . APAR exp CPAR
    (83) factor -> . factorp ctes
    (84) factorp -> . MAS
    (85) factorp -> . MENOS
    (86) factorp -> . empty
    (97) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 43
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    WRITE           shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60
    APAR            shift and go to state 44
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    CTEI            reduce using rule 97 (empty -> .)
    CTEF            reduce using rule 97 (empty -> .)

  ! ID              [ reduce using rule 97 (empty -> .) ]

    estatutos                      shift and go to state 210
    asig                           shift and go to state 46
    llamada                        shift and go to state 47
    return                         shift and go to state 48
    lectura                        shift and go to state 49
    escritura                      shift and go to state 50
    cond                           shift and go to state 51
    while                          shift and go to state 52
    for                            shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 61
    factor                         shift and go to state 62
    factorp                        shift and go to state 63
    empty                          shift and go to state 66

state 209

    (73) for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos . CLLA

    CLLA            shift and go to state 211


state 210

    (67) condpp -> ELSE ALLA estatutos . CLLA

    CLLA            shift and go to state 212


state 211

    (73) for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .

    ID              reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    RETURN          reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    READ            reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    WRITE           reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    IF              reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    WHILE           reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    FOR             reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    APAR            reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    MAS             reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    MENOS           reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    CTEI            reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    CTEF            reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)
    CLLA            reduce using rule 73 (for -> FOR ID ididx IGUAL exp TO exp DO ALLA estatutos CLLA .)


state 212

    (67) condpp -> ELSE ALLA estatutos CLLA .

    ID              reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    RETURN          reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    READ            reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    WRITE           reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    IF              reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    WHILE           reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    FOR             reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    APAR            reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    MAS             reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    MENOS           reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    CTEI            reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    CTEF            reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)
    CLLA            reduce using rule 67 (condpp -> ELSE ALLA estatutos CLLA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for MAS in state 61 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 72 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 192 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 207 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: reduce/reduce conflict in state 112 resolved using rule (ctes -> ID)
WARNING: rejected rule (empty -> <empty>) in state 112
